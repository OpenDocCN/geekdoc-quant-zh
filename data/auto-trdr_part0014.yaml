- en: Chapter 11\. Building A Robust Trading Infrastructure
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章. 构建强大的交易基础设施
- en: Hardware Considerations
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件考虑
- en: At the heart of every algorithmic trading setup lies the hardware, the cornerstone
    supporting the software, data streams, and algorithmic computations. A proficient
    and rigorous algorithmic trader places paramount importance on the hardware, emphasizing
    its capacity, reliability, and adaptability to meet changing needs and market
    challenges. In this , we'll delve into the critical elements to consider when
    selecting or upgrading your hardware configuration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个算法交易设置的核心是硬件，这是支撑软件、数据流和算法计算的基石。一个熟练且严谨的算法交易者对硬件极为重视，强调其容量、可靠性和适应变化需求及市场挑战的能力。在这里，我们将深入探讨选择或升级硬件配置时需要考虑的关键要素。
- en: One of the initial hardware considerations is the Central Processing Unit (CPU).
    The CPU serves as the computer's brain, executing instructions from the software.
    For algorithmic trading, a high-performance CPU is beneficial as it can handle
    simultaneous computations and data streams faster. This might be necessary, particularly
    where the trader employs high-frequency trading or complex mathematical models.
    Therefore, traders might prioritize CPUs with higher clock speeds, multiple cores,
    and parallel processing capabilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的硬件考虑之一是中央处理器（CPU）。CPU作为计算机的大脑，执行来自软件的指令。对于算法交易，高性能的CPU是有利的，因为它可以更快地处理同时的计算和数据流。这在交易者采用高频交易或复杂数学模型时尤其必要。因此，交易者可能会优先选择时钟速度更高、多核和具备并行处理能力的CPU。
- en: Secondly, consider the Random Access Memory (RAM), which temporarily stores
    data that the CPU uses during operation. A larger RAM assists in running multiple
    applications simultaneously and processing massive datasets common in algorithmic
    trading. Notably, traders developing machine learning models or handling real-time
    market feed might require more RAM to facilitate smooth operations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，考虑随机存取存储器（RAM），它临时存储CPU在运行过程中使用的数据。更大的RAM有助于同时运行多个应用程序并处理在算法交易中常见的大规模数据集。值得注意的是，开发机器学习模型或处理实时市场数据流的交易者可能需要更多的RAM以促进顺畅的操作。
- en: Another critical element is the hard drive. For saving vast amounts of historical
    market data and logging trades, a larger storage unit is prudent. Nowadays, Solid
    State Drives (SSD) are preferred over traditional Hard Disk Drives (HDD) due to
    their faster data retrieval speed and reliability, augmenting the overall system
    performance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键要素是硬盘。为了保存大量历史市场数据和记录交易，选择更大的存储单元是明智的。如今，由于其更快的数据检索速度和可靠性，固态硬盘（SSD）比传统的硬盘驱动器（HDD）更受欢迎，从而提升整体系统性能。
- en: Next, network connectivity should not be overlooked. Even the most sophisticated
    algorithmic trading setup can falter with inconsistent or slow internet connection.
    Hence, a stable and fast network connection is crucial for receiving real-time
    data feeds, executing trade orders without latency, and maintaining connection
    with brokers, counterparts and exchanges.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，网络连接不容忽视。即使是最复杂的算法交易设置，在不稳定或缓慢的互联网连接下也可能出现问题。因此，稳定且快速的网络连接对于接收实时数据源、无延迟地执行交易订单，以及与经纪商、交易对手和交易所保持连接至关重要。
- en: Beyond these, traders might also consider graphics processing units (GPUs),
    especially relevant for machine learning applications since they can handle mass
    parallel calculations. Furthermore, cooling systems, power backup solutions, and
    multiple monitors could also augment your trading infrastructure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，交易者还可能考虑图形处理单元（GPU），尤其在机器学习应用中相关，因为它们可以处理大规模的并行计算。此外，冷却系统、电源备份解决方案和多台显示器也可以增强你的交易基础设施。
- en: Finally, a key decision for a trader when considering hardware is whether to
    invest in a local hardware setup or leverage cloud-based solutions. While local
    systems might provide a higher level of control and security, cloud-based solutions
    can offer greater scalability, flexibility, and cost-effectiveness, especially
    for growing trading operations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于交易者而言，在考虑硬件时，一个关键决定是是否投资于本地硬件设置或利用基于云的解决方案。虽然本地系统可能提供更高的控制和安全级别，但基于云的解决方案可以提供更大的可扩展性、灵活性和成本效益，特别是在不断增长的交易业务中。
- en: 'Here''s a mock Python script illustrating how your hardware considerations
    translate to your trading setup:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例Python脚本，说明了你的硬件考虑如何转化为交易设置：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This script would return a summary of CPU cores, RAM, and available GPUs. Such
    an analysis can help you understand your current system capabilities and identify
    areas for future upgrades.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将返回CPU核心、RAM和可用GPU的摘要。这种分析可以帮助你了解当前系统的能力，并识别未来升级的方向。
- en: Hardware infrastructure is an essential component of algorithmic trading, especially
    for strategies that require quick decision-making based on real-time data. A well-equipped
    system can give traders the potential edge in the highly competitive financial
    markets. Hence, hardware considerations should always align with future growth,
    trading objectives, and budget constraints. Remember, an investment in robust
    hardware could yield its weight in profitable trades.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件基础设施是算法交易的重要组成部分，尤其是对于那些需要基于实时数据快速决策的策略。一个装备良好的系统能够为交易者在竞争激烈的金融市场中提供潜在的优势。因此，硬件考虑应该始终与未来的增长、交易目标和预算限制相一致。记住，对强大硬件的投资可能会在盈利交易中获得相应的回报。
- en: Software Architecture
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构
- en: Delving into the realms of algorithmic trading isn't merely a testament to your
    affinity for blending financial acumen with coding prowess. It's explicitly about
    constructing a formidable machine. A machine that symbolises an indomitable merger
    of comprehensive hardware setup and ingenious software architecture. In this ,
    we navigate the intricate coalescence of code, algorithms, and data, better known
    to the trader world as, the 'Software Architecture.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 深入算法交易领域不仅是对你将金融敏锐度与编程能力结合的证明。这明确是关于构建一台强大的机器。一台象征着全面硬件设置与巧妙软件架构不可阻挡融合的机器。在这里，我们导航代码、算法与数据的复杂结合，更为交易者所熟知的便是“软件架构”。
- en: Software architecture forms the skeletal strategic inter where your algorithmic
    decisions are met with a methodical structure, enforcing interdisciplinary functionality
    and interoperability across your trading setup. Much like an architectural blueprint
    for a physical building, a software architecture outlines the system's design
    and specifies the interaction amongst its components.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构构成了你算法决策与系统化结构相遇的骨架战略框架，强制执行跨学科的功能性和互操作性，贯穿你的交易设置。就像实体建筑的建筑蓝图，软件架构勾勒出系统的设计，并指定其组件之间的交互。
- en: Established at the heart of your trading horizon, you'll find the algorithmic
    trading platform. This is the primary component of your software architecture,
    serving as the conductor leading the algorithmic symphony. Trading platforms handle
    important functionalities such as gathering market data, implementation of trading
    signals and managing order placements. Tools like Interactive Brokers, Alpaca,
    and Robinhood provide Python APIs that can be a great starting point.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在你交易视野的核心位置，你会发现算法交易平台。这是你软件架构的主要组成部分，充当着引导算法交响乐的指挥。交易平台处理重要功能，如市场数据的收集、交易信号的实施和订单的管理。像Interactive
    Brokers、Alpaca和Robinhood这样的工具提供Python API，可以作为一个很好的起点。
- en: 'Here''s an example of how to establish a connection to Alpaca''s trading API
    using Python:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用Python建立与Alpaca交易API连接的示例：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The backbone, in any case, is the data acquisition and storage component. Real-time,
    high-frequency data is the lifeblood of algorithmic trading. Ensuring efficient
    and reliable methods of data ingestion from brokers or data vendors is critical.
    Simultaneously, a robust data storage solution capable of handling vast amounts
    of data is requisite. Databases like MySQL or PostgreSQL could be leveraged for
    structured data, while NoSQL databases like MongoDB could be utilised for semi-structured
    data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，数据采集和存储组件都是骨干。实时的高频数据是算法交易的命脉。确保从经纪商或数据供应商获取数据的高效和可靠的方法至关重要。同时，能够处理大量数据的强大数据存储解决方案也是必要的。可以利用MySQL或PostgreSQL等数据库处理结构化数据，而MongoDB等NoSQL数据库则可用于半结构化数据。
- en: For processing trading data and implementing trading strategies, traders usually
    employ backtesting and execution engines. These components allow traders to test
    their strategies using historical data (backtesting) or real-time data (live trading).
    Python, with its extensive libraries such as Pandas for data manipulation, NumPy
    for numerical computations and Zipline for backtesting, becomes the unsung hero
    in these endeavours.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理交易数据和实施交易策略时，交易者通常使用回测和执行引擎。这些组件允许交易者使用历史数据（回测）或实时数据（实盘交易）来测试他们的策略。Python凭借其丰富的库，如用于数据处理的Pandas、用于数值计算的NumPy和用于回测的Zipline，成为这些努力中的无名英雄。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The final pie in the software architecture is the risk management and trade
    processing unit. This favours any contingencies, managing open positions, tracking
    fills and sending orders while maintaining an echo of the algorithmic trading
    activity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构中的最终组成部分是风险管理和交易处理单元。这有助于应对各种意外情况，管理未平仓头寸，跟踪成交并发送订单，同时保持算法交易活动的回响。
- en: The choice between building individual components from scratch or making use
    of existing solutions is contingent upon factors such as strategy complexity,
    budget, and the trader's coding proficiency. Many commercial and open-source software
    solutions provide versatile features to facilitate both novice and seasoned algorithmic
    traders. Remember, a well-designed software architecture is pivotal for efficient,
    reliable, and scalable trading operations. It can make the difference between
    sustained profitability and intermittent success.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从头构建独立组件或利用现有解决方案的选择取决于策略复杂性、预算以及交易者的编码能力等因素。许多商业和开源软件解决方案为初学者和经验丰富的算法交易者提供了多种功能。请记住，良好设计的软件架构对于高效、可靠和可扩展的交易操作至关重要。这可以决定持续盈利与间歇性成功之间的差异。
- en: Data Storage and Management
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储与管理
- en: Within the labyrinth of algorithmic trading, the strength of your software architecture
    can only be fully realised when the right pieces are put together. And data, revered
    as the new oil, forms an undeniable cornerstone in this framework. Data in trading
    is not just about volume; it's about speed, accuracy, timeliness, and accessibility.
    Thus, in this , we will explore the profound aspects of data storage and management.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易的迷宫中，软件架构的力量只有在将正确的部分组合在一起时才能得到充分体现。数据被视为新石油，是这一框架中不可否认的基石。交易中的数据不仅仅是关于数量；它还关乎速度、准确性、及时性和可访问性。因此，在这篇文章中，我们将深入探讨数据存储与管理的深刻方面。
- en: Data in trading encompasses diverse data types. You have real-time data, historical
    data, fundamental data, and alternative data, each with its own idiosyncrasies.
    Therefore, a robust data storage and management strategy should be capable of
    accommodating this diversity, ensuring seamless data communication, and setting
    up a fail-safe data backup and recovery plan.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 交易中的数据涵盖多种数据类型。你有实时数据、历史数据、基本面数据和替代数据，每种数据都有其独特性。因此，一个强大的数据存储与管理策略应该能够容纳这种多样性，确保无缝的数据通信，并建立可靠的数据备份和恢复计划。
- en: Consider an algorithmic trading setup. Data needs to flow from the market data
    provider or broker to your trading system speedily and efficiently. This is where
    database management systems (DBMS) come into play. SQL-based DBMS like MySQL or
    PostgreSQL are known for their robustness and extensive query capabilities, making
    them ideal for structured data management.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个算法交易设置。数据需要迅速有效地从市场数据提供商或经纪人流向你的交易系统。这就是数据库管理系统（DBMS）发挥作用的地方。基于SQL的DBMS如MySQL或PostgreSQL因其强大和广泛的查询能力而闻名，成为结构化数据管理的理想选择。
- en: 'For instance, here is an example of inserting stock data into PostgreSQL with
    Python:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是使用Python将股票数据插入PostgreSQL的示例：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Semi-structured and unstructured data (for example, alternative data like social
    media sentiment or Reuters News Flow) would require more flexible storage solutions
    like NoSQL databases such as MongoDB or Cloud Storage platforms such as Amazon
    S3.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 半结构化和非结构化数据（例如，社交媒体情绪或路透社新闻流等替代数据）需要更灵活的存储解决方案，如MongoDB等NoSQL数据库或Amazon S3等云存储平台。
- en: Data, of course, is no static entity. With its characteristic fluidity, comes
    the need for pre-processing, cleaning, backfilling for missing datapoints, outlier
    management, and normalization. These are the routines you need to build within
    your data storage and management ecosystem. Python libraries such as Pandas, NumPy,
    and Scikit-Learn can be especially useful for these purposes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数据当然不是静态实体。随着其特有的流动性，便需要进行预处理、清洗、填补缺失数据点、管理异常值和归一化。这些是你需要在数据存储和管理生态系统中建立的常规操作。像Pandas、NumPy和Scikit-Learn这样的Python库在这些方面尤其有用。
- en: Yet another crucial component is real-time data handling. Elements like data
    streaming and processing become inevitable when dealing with real-time trading
    data. This is where tools like Redis, Kafka, or RabbitMQ can aid in real-time
    data processing with lower latency and higher throughput as a data pipeline framework.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键组成部分是实时数据处理。在处理实时交易数据时，数据流和处理等元素变得不可避免。这时，Redis、Kafka或RabbitMQ等工具可以帮助实现低延迟和高吞吐量的实时数据处理，作为数据管道框架。
- en: In the grand scheme of algorithmic trading, your fortress of data necessitates
    a solid shield that guards against data corruption, loss, or breaches. Ensuring
    regular data backups, encryption during data transfers, and rigorous access control
    mechanisms should be integral to your data management strategy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易的宏观框架中，你的数据堡垒需要一个坚固的盾牌，以防止数据损坏、丢失或泄露。确保定期数据备份、数据传输加密和严格的访问控制机制应该是你数据管理策略的重要组成部分。
- en: Finally, don’t underestimate the importance of data accessibility. An intricate
    network of APIs (Application Programming Interfaces) should ensure that data can
    seamlessly be fetched from, and fed into, all necessary components of your trading
    system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，不要低估数据可访问的重要性。复杂的API（应用程序接口）网络应确保数据可以无缝地从交易系统的所有必要组件中提取和输入。
- en: In a nutshell, tactical command over your data arsenal can be the pivot that
    makes or breaks your algorithmic trading operation. But remember, with great data,
    comes great responsibility. Beyond just caching data, the real capability lies
    in the extraction of actionable insights that guide your trading strategies, simply
    put, operationalizing data. Thus, an effective data storage and management strategy
    propels you onboard the flight towards achieving your trading goals.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，对数据武器库的战术掌控可以成为决定算法交易操作成败的关键。但请记住，伟大的数据伴随着巨大的责任。超越单纯的缓存数据，真正的能力在于提取指导交易策略的可操作见解，简单来说，就是数据的操作化。因此，有效的数据存储和管理策略推动你朝着实现交易目标的飞行前进。
- en: Security Considerations
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安全考虑
- en: From the bedrock of software architecture to the veneer of user interfaces,
    security in algorithmic trading is a multi-faceted domain that bridges technology
    and compliance. With increasing migrations towards cloud-based setups, permeability
    of mobile applications, and the incessant rise in cybercrime, security has undoubtedly
    become a forefront priority. In this , we plunge into the whirlpool of security
    considerations for an algorithmic trading infrastructure.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从软件架构的基石到用户界面的表面，算法交易中的安全性是一个多方面的领域，连接着技术和合规性。随着向基于云的设置的迁移增加，移动应用程序的渗透性，以及网络犯罪的不断上升，安全性无疑已成为首要任务。在这里，我们深入探讨算法交易基础设施中的安全考虑。
- en: At the crux of your trading operations lies the sanctity of your data. Encrypted
    data transmission, secure login mechanisms, restricted access control, and regular
    security audits help forge the protective barriers around your data. SSL/TLS encryption
    ensures secure communication between your trading bots and broker's servers. Multi-factor
    authentication enhances the security of your user logins.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的交易操作的核心，数据的神圣性至关重要。加密的数据传输、安全的登录机制、受限的访问控制和定期的安全审计帮助建立围绕数据的保护屏障。SSL/TLS加密确保交易机器人与经纪服务器之间的安全通信。多因素身份验证增强了用户登录的安全性。
- en: 'Consider this snippet of Python code for AES encryption of your data:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这段用于AES加密数据的Python代码：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Yet, protecting your data is not where it ends, but where it begins. It’s also
    vital to shield your order routing and execution mechanisms, critical to averting
    market manipulation. Pre-trade risk checks, order throttling, kill switches -
    these must form an integral part of an algorithmic trader's toolkit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，保护你的数据并不是结束，而是开始。保护你的订单路由和执行机制也至关重要，以防止市场操控。交易前风险检查、订单限流、紧急停机开关——这些必须构成算法交易员工具包的重要组成部分。
- en: Hardware and network security are the unsung heroes of an algorithmic trading
    setup. Firewalls and intrusion detection or prevention systems (IDS/IPS) safeguard
    you from any unauthorized access to your trading network. Public key infrastructure
    and secure VPNs further bolster your network security.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件和网络安全是算法交易系统中默默无闻的英雄。防火墙和入侵检测或防御系统（IDS/IPS）保护你免受任何未经授权的访问。公钥基础设施和安全VPN进一步增强你的网络安全。
- en: Security, in the realm of cloud computing and trading, is twofold. While cloud
    servers offer the advantage of robust protection against hardware failures, power
    outages, and losing data, they also pose a risk of multi-tenancy and shared technology
    vulnerabilities. Therefore, selecting a reputable cloud service provider with
    stringent security norms is pivotal.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算和交易领域，安全性是双重的。虽然云服务器提供了强大的保护，防止硬件故障、电力中断和数据丢失，但它们也带来了多租户和共享技术漏洞的风险。因此，选择一家具有严格安全规范的信誉良好的云服务提供商至关重要。
- en: Lastly, let's not overlook the regulatory guidelines that rule the roost. Compliance
    to tiered access controls, audit logs, and regulatory measures such as GDPR, HIPAA,
    and CCPA (depending on your geographic and demographic trading patterns) ensures
    that you navigate the stormy waters of algorithmic trading legally unscathed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们不能忽视主导局势的监管指南。遵守分级访问控制、审计日志，以及根据你的地理和人口交易模式而定的GDPR、HIPAA和CCPA等法规措施，确保你在算法交易的风浪中合法无虞。
- en: In conclusion, security in an algorithmic trading setup is not an option, but
    a mandatory checklist. It demands constant surveillance, timely upgrades, and
    running on the treadwheel of evolving technology and regulations. After all, in
    the realm of trading, while you hustle for profits, you cannot afford to lose
    your shield.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，算法交易系统中的安全性不是选择，而是强制检查清单。它要求持续监控、及时升级，并在不断发展的技术和法规的踏轮上运行。毕竟，在交易领域，当你追求利润时，你不能失去你的保护。
- en: System Monitoring and Alerts
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 系统监控和警报
- en: The crux of algorithmic trading is not simply the formulation of successful
    trading strategies; it is also about timely and efficient execution. This requires
    a seamless performance of your infrastructure, making system monitoring and imposed
    alerts mission-critical components of your trading setup. Wondering why? This 
    dives into precisely that.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易的核心不仅仅是制定成功的交易策略；它还涉及及时和高效的执行。这需要你的基础设施无缝运行，使系统监控和设置警报成为交易系统中的关键组件。想知道为什么吗？这正是要深入探讨的内容。
- en: Any malfunction or fault in your algorithmic trading infrastructure can cascade
    into colossal losses in a matter of seconds. Here, system monitoring proves to
    be your knight in shining armor. It aids in identifying hardware malfunctions,
    software crashes, network connectivity issues, or even unwarranted latencies,
    allowing you to take quick remedial actions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易基础设施中的任何故障都可能在几秒钟内引发巨大的损失。在这里，系统监控证明是你闪亮的骑士。它帮助识别硬件故障、软件崩溃、网络连接问题，甚至不必要的延迟，使你能够迅速采取补救措施。
- en: 'In Python, there are incredible tools which enable efficient system monitoring.
    For instance, `psutil` is a cross-platform library used to access system details
    and process utilities. The following Python snippet demonstrates how to fetch
    CPU utilization data:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，有一些令人惊叹的工具可以实现高效的系统监控。例如，`psutil`是一个跨平台的库，用于访问系统详细信息和进程实用程序。以下Python代码片段演示如何获取CPU使用率数据：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Apart from monitoring the computational resources, it is essential to scrutinize
    the performance metrics of your trading algorithms. You should ensure the expected
    throughput, latency, and transaction-per-second (TPS) are within acceptable limits
    and keep an eye out for any memory leakage problems. Here Python's `Profile` library
    can help provide statistical analysis of resources consumed by different s of
    your algorithm.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了监控计算资源外，审查你的交易算法的性能指标也至关重要。你应该确保预期的吞吐量、延迟和每秒交易量（TPS）在可接受的范围内，并留意任何内存泄漏问题。在这里，Python的`Profile`库可以帮助提供不同算法部分所消耗资源的统计分析。
- en: 'The second wing of a robust system is alert management. To operate at peak
    efficiency, you need immediate alerts about any failures or breakdowns so that
    you can take immediate action. Alerts also help prevent fraud by detecting unusual
    trading behaviors:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个强大系统的第二个组成部分是警报管理。为了在最佳效率下运行，你需要立即了解任何故障或崩溃，以便立即采取行动。警报还可以通过检测异常交易行为来防止欺诈。
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This simple Python script could be used to send an email alert in the event
    of a malfunction or irregularity. Other platforms, like Twilio, offer APIs for
    SMS alerts. You can often also customize these alerts based on the severity of
    the issues.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的Python脚本可以用来在发生故障或异常时发送电子邮件警报。其他平台，如Twilio，提供SMS警报的API。你也可以根据问题的严重性自定义这些警报。
- en: Monitoring the health of your trading system and keeping alert mechanisms in
    place ensure a smooth trading experience, limit undesired losses, and help catch
    technical glitches before they snowball into major issues. They form an integral
    part of your fail-safe mechanism and ensure the robustness of your trading infrastructure.
    Be vigilant, stay alerted, and trade with confidence.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 监控你的交易系统的健康状况并保持警报机制到位，可以确保顺畅的交易体验，限制不必要的损失，并帮助在技术故障雪崩成重大问题之前及时发现。它们是你的故障安全机制的一个重要组成部分，确保你的交易基础设施的稳健性。保持警惕，保持关注，自信交易。
- en: Fail-Safe Mechanisms
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**故障安全机制**'
- en: Fail-safe mechanisms take a critical role in ensuring the functionality and
    profitability of your algorithmic trading setup. Predominantly designed to curb
    the impact of unexpected catastrophic events or failures, these mechanisms add
    a preventative layer to your trading process.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**故障安全机制**在确保你的算法交易设置的功能性和盈利性方面发挥着关键作用。这些机制主要设计用来减缓意外灾难事件或故障的影响，为你的交易过程增添了一层预防性保护。'
- en: From system crashes and power outages to abrupt market fluctuations and data
    corruption, diverse spectrums of threats lie in the path of algorithmic trading.
    Without a resilient fail-safe mechanism, these threats have the potential to escalate
    into significant financial losses. This  will guide you on effectively integrating
    robust fail-safe mechanisms to safeguard your trading operations against the unpredictable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统崩溃和停电到突发市场波动和数据损坏，算法交易面临着各种威胁。没有强大的故障安全机制，这些威胁可能会升级为重大财务损失。这将指导你有效地整合强大的故障安全机制，以保护你的交易操作免受不可预测的影响。
- en: Before diving into the technical context, it's essential to understand the concept
    of fail-safe mechanisms in the landscape of algorithmic trading. Essentially,
    fail-safe mechanisms are systematic protocols devised to ensure graceful degradation
    in the event of a breakdown. In algorithmic trading, where trades are lightning-fast
    and automatic, these mechanisms are designed to prevent failures from spiraling
    into costly errors.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入技术背景之前，了解故障安全机制在算法交易中的概念至关重要。基本上，故障安全机制是系统协议，旨在确保在发生故障时优雅地降级。在算法交易中，交易迅速且自动，这些机制旨在防止故障演变为代价高昂的错误。
- en: 'Python, as an incredibly versatile language, offers excellent tools to implement
    such fail-safe mechanisms. Central to this is exception handling. Python’s try-except
    blocks can catch and deal with errors during run-time, preventing the program''s
    abrupt halt. Here is an elementary example of how exception handling works in
    Python:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一种极具多样性的语言，提供了实施此类故障安全机制的优秀工具。核心是异常处理。Python的try-except块可以捕获并处理运行时错误，防止程序的突然停止。以下是异常处理在Python中工作的基本示例：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These blocks can catch different types of exceptions, from a simple IOError
    to complex issues like MemoryError, providing you complete control over problem-solving
    strategies. They gracefully catch any unexpected behavior during run-time and
    define what happens in the event of such errors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块可以捕获不同类型的异常，从简单的IOError到复杂的问题如MemoryError，提供你完全控制问题解决策略的能力。它们在运行时优雅地捕捉任何意外行为，并定义在发生此类错误时的处理方式。
- en: Another effective fail-safe strategy involves the use of 'circuit breakers'.
    These are protections invoked when specific conditions are met, forcing the algorithm
    to stop trading. This mechanism is particularly beneficial when markets are hugely
    volatile, helping avoid massive losses. It's equivalent to the emergency stop
    lever on a piece of dangerous machinery.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有效的安全策略是使用“熔断器”。当满足特定条件时，这些保护机制会被触发，迫使算法停止交易。当市场波动剧烈时，这一机制尤其有益，有助于避免巨额损失。这就像危险机械上的紧急停止杆。
- en: For instance, developing a simple circuit breaker in Python can involve defining
    a conditional statement checking for an unacceptable level of portfolio drawdown.
    If the drawdown surpasses the predefined limit, the 'circuit breaker' triggers,
    halting the algorithm from placing further trades.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Python中开发一个简单的熔断器可能涉及定义一个条件语句，以检查投资组合回撤是否达到不可接受的水平。如果回撤超过预设的限制，“熔断器”就会触发，停止算法进行进一步交易。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Intricate planning should be applied to designing fail-safe mechanisms as one-size
    may not fit all. The fail-safe for a high-frequency trading algorithm might look
    very different from a slower, bulk trading bot. Remember, the ultimate goal of
    these mechanisms is to protect you from unpredictable market dynamics and technical
    glitches.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计安全机制时，应进行复杂的规划，因为一刀切的方法可能并不适用。高频交易算法的安全机制与慢速批量交易机器人可能截然不同。记住，这些机制的*终极*目标是保护你免受不可预测的市场动态和技术故障的影响。
- en: Maintaining order in the whirlwind of algorithmic trading can be challenging.
    Still, by enforcing suitable fail-safe mechanisms, you can navigate this digital
    world with more confidence and resilience, positioning yourself one step ahead
    in the game of algorithmic trading.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易的漩涡中维持秩序可能具有挑战性。然而，通过实施合适的安全机制，你可以更自信、更具韧性地在这个数字世界中导航，使自己在算法交易的游戏中领先一步。
- en: Order Routing and Execution
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 订单路由与执行
- en: In the financial markets, success or failure hangs often in the balance of milliseconds.
    Even the most robustly coded trading algorithms armed with fail-safe measures
    can fall flat without an efficient order routing and execution process highly
    susceptible to concepts such as latency. This  endeavors to facilitate a deeper
    understanding of the significance of order routing and execution in algorithmic
    trading, specifically focusing on how Python can leverage this critical aspect.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融市场中，成功或失败往往悬挂在毫秒之间。即使是最强大的交易算法，在缺乏高效的订单路由和执行过程时，也可能无所作为，这些过程非常容易受到延迟等概念的影响。这旨在深入了解订单路由和执行在算法交易中的重要性，特别关注Python如何利用这一关键方面。
- en: Order routing is the systemized procedure through which market orders - your
    buying or selling instructions- reach the exchange from your trading platform.
    The speed, efficiency, and reliability of this procedure play a crucial role in
    securing price-time priority, a coveted aspect when dealing with highly volatile,
    hyper-reactive financial markets.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 订单路由是市场订单（你的买入或卖出指令）从交易平台到达交易所的系统化过程。该过程的速度、效率和可靠性在确保价格时间优先权方面发挥着至关重要的作用，这在处理高度波动、反应迅速的金融市场时尤为重要。
- en: Python, renowned for its simplicity and power, emerges as an effective language
    for overseeing the order routing and execution process. Several Python-based trading
    platforms, libraries, and Application Programming Interfaces (APIs) offer straightforward
    ways to route orders and handle their execution. Whether you’re interfacing directly
    with an exchange or using a broker, Python likely has a serviceable library or
    API.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python因其简单性和强大而闻名，是监督订单路由和执行过程的有效语言。多个基于Python的交易平台、库和应用程序编程接口（APIs）提供了简单的方式来路由订单和处理其执行。无论你是直接与交易所接口，还是使用经纪商，Python都有可能提供可用的库或API。
- en: For instance, Interactive Brokers, a popular broker among algorithmic traders,
    provides the IBPy interface. This Python wrapper allows you to interact with the
    Interactive Brokers' Trader WorkStation (TWS), enabling you to route orders and
    handle their execution programmatically.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Interactive Brokers 是算法交易员中流行的经纪商，提供 IBPy 接口。这个 Python 包装器使你能够与 Interactive
    Brokers 的交易工作站 (TWS) 进行交互，从而使你能够以编程方式路由订单并处理其执行。
- en: 'Let us consider the following block of Python code as an example to illustrate
    how to route an order:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下 Python 代码块作为一个示例，以说明如何路由订单：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this snippet, a connection to TWS is established, an order for buying one
    share of Google's stock is created, and then the order is placed for execution.
    The entire order routing and execution process takes place within a brief, programmable
    procedure.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，建立了与 TWS 的连接，创建了购买一股 Google 股票的订单，然后将该订单提交执行。整个订单路由和执行过程在一个简短的可编程过程中完成。
- en: Speed isn't the only benchmark; quality matters just as much, if not more. Invest
    in meticulously tracking the performance of any venue to which you are routing
    orders. Supervise fills, monitor latency, and constantly keep an eye out for speed
    bumps.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 速度不是唯一的标准；质量同样重要，甚至更重要。投资于仔细跟踪你路由订单的任何场所的表现。监督成交，监控延迟，并时刻留意速度障碍。
- en: Order routing and execution in algorithmic trading goes beyond technology or
    strategy. It forms a canvas where the law of microeconomics, nuances of market
    mechanics, and art of algorithmic elegance converge. In this pursuit of blending
    precision with promptness, Python might just prove to be the guide you were seeking
    in the labyrinth of algorithmic trading. Always remember, financial markets never
    sleep, and as an algorithmic trader, neither does your code. Your algorithms should
    be always up, always analyzing and always ready. And the right order routing and
    execution strategy ensures just that. It ensures you stay ahead of the markets,
    always.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易中的订单路由和执行不仅仅是技术或策略的问题。它形成了一幅画布，在这里，微观经济学的法则、市场机制的细微差别和算法优雅的艺术交汇。在将精确与迅速融合的追求中，Python
    可能正是你在算法交易迷宫中寻找的指引。请始终记住，金融市场从不休眠，作为算法交易员，你的代码也同样不休眠。你的算法应该始终在线，始终在分析，并且随时准备好。而正确的订单路由和执行策略确保了这一点。它确保你始终领先于市场。
- en: Colocation and Proximity Hosting
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 共址和近地托管
- en: The world of algorithmic trading is dictated by response times that are often
    smaller than the blink of an eye. These extremely minuscule time measures, known
    in the vernacular as latencies, can become a formidable roadblock for traders
    who fail to acknowledge and address them. It may dissuade these otherwise capable
    coders caught in a struggle between pushing their systems into overdrive and accepting
    that technology and geology possess finite limits. This is where colocation and
    proximity hosting enter the frame, enabling traders to bend the seemingly indomitable
    limits of time and distance alike.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易的世界由反应时间决定，这些时间往往小于眨眼的瞬间。这些极其微小的时间测量，通俗地称为延迟，可能会成为那些未能认识到并解决这些问题的交易员的严峻障碍。这可能会使这些原本有能力的编码者在将系统推向极限和接受技术与地理有其有限性之间陷入挣扎。这就是共址和近地托管进入视野的地方，使交易员能够弯曲时间和距离这两者似乎不可逾越的极限。
- en: Colocation and proximity hosting are fundamental elements in today’s ultra-competitive
    algorithmic trading landscape. Traders employ these techniques to eliminate the
    constraints posed by the speed of light and geographic location. They fundamentally
    alter the algorithmic trading environment by pulling servers and traders from
    various corners across the globe and gathering them into tightly packed technological
    bazaars. Here, information flows seamlessly and nearly instantaneously, giving
    birth to a trading utopia where winning and losing stand on a knife's edge.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 共址和近地托管是当今超竞争的算法交易环境中的基本要素。交易员利用这些技术来消除光速和地理位置带来的限制。它们从根本上改变了算法交易环境，通过将来自全球各个角落的服务器和交易员聚集到紧凑的技术集市中。在这里，信息流动无缝且几乎瞬时，孕育出一个在刀尖上胜负悬殊的交易乌托邦。
- en: Firstly, let us zero in on understanding what colocation and proximity hosting
    imply. Colocation, in the context of trading, pertains to the practice of housing
    privately-owned servers and networking equipment in a third-party data centre.
    This is typically a facility that is situated within, or extremely close to, the
    premises of an exchange. Proximity hosting is quite similar, although it pushes
    the concept a touch further by providing a managed service where a third-party
    vendor also takes the responsibility of maintaining the servers along with providing
    the space.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们聚焦于理解共置和近端托管的含义。在交易的上下文中，共置是指将私人拥有的服务器和网络设备放置在第三方数据中心的做法。这通常是一个位于交易所内或非常接近交易所的设施。近端托管与此相似，但将概念推向更远，提供一种托管服务，由第三方供应商负责维护服务器并提供空间。
- en: The main goal of both these practices is to cut down the travel time when an
    order is placed and wedding the trading algorithm to the exchange. Doing so not
    only introduces higher speed to order execution but also, with greater proximity,
    comes enhanced access to real-time market data directly from the exchange itself.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种做法的主要目标是缩短下单时的旅行时间，将交易算法与交易所连接起来。这样做不仅引入了更高的订单执行速度，而且由于更接近交易所，能够直接访问来自交易所的实时市场数据。
- en: 'But how is the amalgamation of colocation and Python beneficial to an algorithmic
    trader? Suppose you utilise the following Pythonic code to proximally host an
    order handling algorithm:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，联合共置和 Python 对算法交易者有什么好处呢？假设你利用以下 Python 代码在近端托管一个订单处理算法：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This script sends a single order of buying 5 DOJun19 contracts at a price of
    42.56 pesos to the ROFX market from a proximally hosted server directly through
    the trading engine. Just by utilising Python’s libraries, the speed and efficiency
    of an algorithm can be dramatically improved.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本通过交易引擎从近端托管的服务器向 ROFX 市场发送一条购买 5 个 DOJun19 合约、价格为 42.56 比索的单一订单。仅通过使用 Python
    的库，算法的速度和效率就可以大幅提升。
- en: But like the two sides of a coin, colocation and proximity hosting come with
    their own sets of challenges. Traders need to deal with surprisingly high maintenance
    costs of high-end servers, infrastructural complexity and challenges in maintaining
    a stable connection. Therefore, algorithmic traders must evaluate the associated
    benefit from lower latencies against these costs, keeping in perspective their
    specific trading strategies.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但像硬币的两面一样，共置和近端托管也面临着各自的挑战。交易者需要应对高端服务器的维护成本惊人、基础设施复杂以及维持稳定连接的挑战。因此，算法交易者必须在考虑特定交易策略的情况下，评估与较低延迟相关的好处与这些成本之间的关系。
- en: As latency gets whittled down, the battle in algorithmic trading will increasingly
    happen at the peripheries – in milliseconds and microseconds. In this advanced
    race against time, colocation and proximity hosting could be the game-changing
    elements that differentiate success from failure. These two techniques, twinned
    with Python as a tool, can truly empower an algorithmic trader to turn latency
    from a potential obstacle into a competitive edge.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 随着延迟不断降低，算法交易的竞争将越来越多地发生在边缘——在毫秒和微秒之间。在这场与时间的高级竞赛中，共置和近端托管可能成为区分成功与失败的关键要素。这两种技术，加上
    Python 作为工具，确实能够使算法交易者将延迟从潜在障碍转变为竞争优势。
- en: Building Redundancies
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 建立冗余
- en: Algorithmic trading has blossomed into a complex machine that weds sophisticated
    financial mathematics with some of the most advanced computing technologies mankind
    has created. Latency is obliterated, algorithms whirr into motion at the speed
    of light, and fortunes are made or lost before we can blink. But what happens
    when this magnificently streamlined contraption comes grinding to a screeching
    halt? Such moments remind traders of a seemingly omnipresent Tolkienian adage,
    “One error to rule them all”.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易已经发展成为一种复杂的机器，将复杂的金融数学与人类创造的一些最先进的计算技术结合在一起。延迟被消除，算法以光速运转，财富在我们眨眼之间得失。但当这台精密的机器突然停顿时会发生什么呢？这样的时刻让交易者想起一个似乎无处不在的托尔金名言：“一个错误统治他们所有”。
- en: System failures are inherent parts of algorithmic trading that every trader
    grapples with at some point. However, the damage these errors inflict can be significantly
    curtailed by weaving a safety net by way of building redundancies. Building redundancies,
    in a nutshell, is a set of protocols developed to avoid, mitigate and manage catastrophic
    failures in algorithmic trading systems.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 系统故障是每个交易员在某个时刻都要面对的算法交易固有部分。然而，通过构建冗余来编织安全网，可以显著减少这些错误造成的损害。简单来说，构建冗余是一套旨在避免、缓解和管理算法交易系统中灾难性故障的协议。
- en: Redundancy, in computing and algorithmic trading, is a method of fault tolerance.
    It involves allocating surplus or backup resources in anticipation of system failure.
    These backup systems spring into action when main trading servers, connections
    or algorithms stumble or fail. They serve as a secondary line of defence that
    keeps your trading infrastructure up and running even when primary systems fail.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机和算法交易中，冗余是一种容错方法。它涉及在预期系统故障的情况下分配多余或备份资源。这些备份系统在主要交易服务器、连接或算法出现问题或失败时立即启动。它们充当第二道防线，确保即使主要系统发生故障，您的交易基础设施也能正常运行。
- en: 'For instance, algorithmic traders operating on Python can leverage cloud-based
    resources for creating redundancy. Let''s examine an example using Amazon Web
    Services (AWS) to create multiple instances of your trading server:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用Python进行算法交易的交易员可以利用基于云的资源来创建冗余。让我们来看一个使用亚马逊网络服务（AWS）创建多个交易服务器实例的例子：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This script spins up two replicas of your trading server to act as redundancies
    in an AWS environment. If the primary server were to stumble and fall, the burden
    of operations would be swiftly handed over to the redundant servers, ensuring
    continuous functioning of the algorithmic trading strategy.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本在AWS环境中启动了两个交易服务器的副本，作为冗余。如果主要服务器出现故障，操作负担将迅速转移到冗余服务器，确保算法交易策略的持续运行。
- en: 'Let''s explore another type of redundancy; network redundancy. An algorithmic
    trader, as an example, could set up a secondary ISP or Internet Service Provider
    that automatically takes over should the primary ISP fail. Pythonic code for managing
    and switching between different network interfaces could look something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨另一种冗余类型：网络冗余。以算法交易员为例，他们可以设置一个次要的互联网服务提供商（ISP），以便在主要ISP发生故障时自动接管。用于管理和切换不同网络接口的Python代码可能如下所示：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Redundancies are an integral part of algorithmic trading, a knight in shining
    armour that shield traders against unforeseen mechanical errors. But bear in mind
    that creating redundant systems isn't a one-size-fits-all solution. It needs careful
    understanding of the specific resilience requirements, appropriate infrastructure
    resources, and the costs associated with achieving redundancy.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 冗余是算法交易不可或缺的一部分，是保护交易员免受意外机械故障的骑士。但请记住，创建冗余系统并不是一种通用的解决方案。它需要仔细了解具体的弹性需求、适当的基础设施资源以及实现冗余所需的成本。
- en: Impenetrable defence systems are born as much from iron wills as from meticulous
    planning and preparation. And while building redundancies may appear tedious and
    costly, in the formidable world of algorithmic trading, it could well be the stitch
    that saves nine.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 不可渗透的防御系统不仅源于坚定的意志，还源于周密的规划和准备。虽然构建冗余可能看起来繁琐且昂贵，但在强大的算法交易世界中，这可能就是那针救命稻草。
- en: Maintenance and Upkeep
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 维护与保养
- en: We’ve all heard the age-old adage, “Prevention is better than cure”. The wisdom
    that underpins this saying holds all-too-true in the world of algorithmic trading.
    As much as we strive to prevent slip-ups and roadblocks from arising within our
    trading infrastructures, the harsh reality is that these disruptions are inevitable.
    Trading systems are fallible, and it's important these mishaps are handled with
    expediency and precision.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都听过那句古老的谚语：“预防胜于治疗”。这一说法所蕴含的智慧在算法交易的世界中尤为真实。尽管我们努力防止交易基础设施中出现失误和障碍，但残酷的现实是，这些干扰是不可避免的。交易系统是易错的，因此，及时和准确地处理这些失误非常重要。
- en: Maintenance and upkeep are arguably the unsung heroes of algorithmic trading,
    the Pheonix rising from the ashes of trading catastrophes and gracefully restoring
    order amidst chaos. These terms refer to the continuous task of testing, updating,
    modifying, and managing the software and trading infrastructure to guarantee its
    optimal functioning.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 维护和保养可以说是算法交易的无名英雄，是从交易灾难的灰烬中崛起的凤凰，在混乱中优雅地恢复秩序。这些术语指的是测试、更新、修改和管理软件及交易基础设施的持续任务，以确保其最佳功能。
- en: 'Let’s kick-start this exploration with scheduled maintenance. This usually
    involves periodical checks and updates on your trading systems. You might test
    your server speed, check the stability of your algorithms, scrutinize each line
    of code for bugs and bottlenecks, or add updates to improve system performance.
    Let''s take a look at how one might schedule a task in Python, using a library
    called schedule:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从定期维护开始这次探索。这通常涉及对交易系统进行定期检查和更新。你可能会测试服务器速度，检查算法的稳定性，仔细审查每一行代码以查找错误和瓶颈，或者添加更新以提高系统性能。让我们看看如何在Python中使用名为schedule的库来安排任务：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This bit of script schedules a daily system check at 1 am, a time when you probably
    aren't executing trades. This form of maintenance guarantees that your system
    is running at its optimal best and any identified issues can be swiftly rectified.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这段脚本在凌晨1点安排每日系统检查，这个时间你可能不会执行交易。这种形式的维护保证了系统在最佳状态下运行，并且任何发现的问题都可以迅速解决。
- en: 'Regular data clean-up is another crucial maintenance activity. Over time, immense
    amounts of data are accrued - obsolete, redundant, or no longer valuable for trading
    decisions. Regular deletion or archiving of such data not only declutters your
    system but can help your algorithms run more efficiently. An example of a Python
    script to remove outdated files could look something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 定期数据清理是另一项重要的维护活动。随着时间的推移，会积累大量的数据——过时的、冗余的，或不再对交易决策有价值的数据。定期删除或归档这些数据不仅能清理系统，还能帮助算法更高效地运行。一个用Python脚本删除过时文件的例子可能如下所示：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This script lists all the files in your specific data folder, checks the last
    modification time, and if the file hasn't been updated in the past 60 days, it
    removes the file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本列出特定数据文件夹中的所有文件，检查最后修改时间，如果文件在过去60天没有更新，则会删除该文件。
- en: Maintenance and upkeep in algorithmic trading aren’t mere preventative measures,
    they’re also a way to extract the most juice from your system. Along with performance-enhancing
    system updates, traders can progressively incorporate advancements in market research,
    algorithmic techniques, new datasets, and novel instruments to trade.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易中，维护和保养不仅仅是预防措施，它们也是从系统中提取最大价值的一种方式。除了提升性能的系统更新，交易者还可以逐步整合市场研究的进展、算法技术、新数据集和新的交易工具。
- en: Ultimately, the practicality and urgency of maintenance and upkeep cannot be
    overstated. The best-built ships would countdown to wreckage without continuous
    upkeep, and algorithmic trading systems are no different. Remember, the smooth
    functioning of your trading infrastructure is an ongoing endeavor, a tireless
    exploration that undergirds the complex ballet of algorithmic trading.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**维护**和**保养**的重要性无法被高估。即使是建造最好的船只，如果没有持续的保养，也会倒计时到沉没，算法交易系统亦是如此。请记住，您交易基础设施的顺畅运行是一个持续的努力，是一场无休止的探索，支撑着算法交易的复杂舞蹈。'
