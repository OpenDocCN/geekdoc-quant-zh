["```pypython\n\ndef set_fixed_stop_loss(price, percentage):\n\nstop_price = price - (price * percentage)\n\nreturn stop_price\n\n```", "```pypython\n\ndef set_trailing_stop_loss(price, percentage):\n\nstop_price = price - (price * percentage)\n\ntrailing_stop = price * (1 - percentage / 100)\n\nreturn max(stop_price, trailing_stop)\n\n```", "```pypython\n\ndef fixed_fractional_position_sizing(account_balance, risk_per_trade, price_per_share):\n\nshares_to_buy = (account_balance * risk_per_trade) / price_per_share\n\nreturn shares_to_buy\n\n```", "```pypython\n\ndef fixed_ratio_position_sizing(account_balance, delta, price_per_share):\n\nshares_to_buy = (account_balance / delta) / price_per_share\n\nreturn shares_to_buy\n\n```", "```pypython\n\nimport pandas as pd\n\ndef diversified_portfolio(assets, weights):\n\nportfolio = pd. DataFrame()\n\nfor asset, weight in zip(assets, weights):\n\nportfolio[asset] = weight * assets[asset]\n\nportfolio['Total'] = pd.Series(portfolio.sum(axis=1), index=portfolio.index)\n\nreturn portfolio\n\n```", "```pypython\n\ndef sector_diversification(portfolio, sectors):\n\nsector_weights = {}\n\nfor sector in sectors:\n\nsector_weights[sector] = portfolio[portfolio['Sector'] == sector]['Weight'].sum()\n\nreturn sector_weights\n\n```", "```pypython\n\ndef geographic_diversification(portfolio, regions):\n\nregion_weights = {}\n\nfor region in regions:\n\nregion_weights[region] = portfolio[portfolio['Region'] == region]['Weight'].sum()\n\nreturn region_weights\n\n```", "```pypython\n\nfrom scipy.stats import genpareto\n\nimport matplotlib.pyplot as plt\n\n# Fit the EVT\n\nparams = genpareto.fit(returns)\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, genpareto.pdf(x, *params))\n\nplt.show()\n\n```", "```pypython\n\nimport numpy as np\n\ndef monte_carlo_simulation(portfolio, days, iterations):\n\nsimulation_df = pd.DataFrame()\n\nfor x in range(iterations):  \n\ncount = 0\n\ndaily_vol = portfolio.std()\n\nprice_array = []\n\nprice = portfolio[-1]\n\nprice_array.append(price)\n\nfor y in range(days):\n\ndelta_price = np.random.normal(price * daily_vol , 2)\n\nprice += delta_price\n\nprice_array.append(price)\n\nsimulation_df[x] = price_array  \n\nreturn simulation_df\n\n```", "```pypython\n\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# Calculate Parametric VaR\n\nalpha = 0.95\n\nvar_95 = norm.ppf(1-alpha, mu, sigma)\n\nprint('Single Day Parametric VaR at 95 confidence level', var_95)\n\n```", "```pypython\n\nfrom scipy.stats import norm\n\n# Calculate Expected Shortfall\n\nalpha = 0.95\n\nES = alpha-1 * norm.pdf(norm.ppf(alpha))*sigma - mu\n\nprint('Single Day Expected Shortfall at 95 confidence level', ES)\n\n```", "```pypython\n\n# Calculate Sharpe Ratio\n\nrisk_free_rate = 0.05\n\nreturns = pf['returns'].dropna()\n\nsharpe_ratio = (np.mean(returns) - risk_free_rate) / np.std(returns)\n\nprint('Sharpe Ratio of the trading strategy', sharpe_ratio)\n\n```", "```pypython\n\nimport pyfolio as pf\n\n# Assuming strategy_returns are the returns of your trading strategy\n\nstrategy_rets = strategy_returns\n\n# Leverage factor\n\nleverage = 2.0\n\n# Apply leverage\n\nlev_returns = strategy_rets * leverage\n\n# Perform backtest\n\npf.create_returns_tear_sheet(lev_returns, live_start_date='2015-12-31')\n\n```", "```pypython\n\nimport numpy as np\n\nimport yfinance as yf\n\nfrom matplotlib import pyplot as plt\n\n# Download historical data for required stocks\n\ndata = yf.download('AAPL','2010-01-01','2020-12-31')\n\ndata = data[['Close']]\n\n# Compute the percentage change\n\ndata['returns'] = data['Close'].pct_change()\n\nclear, turbulent = np.percentile(data.returns.dropna(), [5, 95])\n\n#Plotting\n\nplt.hist(data.returns.dropna(), bins=40)\n\nplt.axvline(x=clear, color='r', linestyle='--')\n\nplt.axvline(x=turbulent, color='r', linestyle='--')\n\nplt.show()\n\n```", "```pypython\n\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# Get the returns\n\nreturns = data['returns']\n\n# Estimate the VaR\n\nVaR_95 = norm.ppf(1 - 0.95, np.mean(returns), np.std(returns))\n\nprint('Single day value at risk ', VaR_95)\n\n```"]