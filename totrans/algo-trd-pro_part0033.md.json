["```pypython\n\nimport numpy as np\n\nimport pandas as pd\n\n# Assume 'portfolio_returns' is a pandas Series of daily portfolio returns\n\nportfolio_returns = pd.Series([...])\n\n# Calculate the 95% VaR using the historical method\n\nvar_95 = np.percentile(portfolio_returns, 5)\n\nprint(f\"The 95% VaR is: {-var_95:.2f}\")\n\n# For CVaR, we calculate the mean of the returns that fall below the 95% VaR\n\ncvar_95 = portfolio_returns[portfolio_returns <= var_95].mean()\n\nprint(f\"The 95% CVaR is: {-cvar_95:.2f}\")\n\n```", "```pypython\n\nimport numpy as np\n\nimport scipy.stats as stats\n\n# Assume 'S' is the current price of the underlying asset, 'K' is the strike price, 'T' is time to expiry,\n\n# 'r' is the risk-free rate, 'sigma' is the volatility of the underlying asset, and 'N' is the number of simulations\n\nS = 100\n\nK = 105\n\nT = 1\n\nr = 0.05\n\nsigma = 0.2\n\nN = 10000\n\n# Simulate end-of-period prices for the underlying asset using the geometric Brownian motion\n\nnp.random.seed(42)\n\nZ = stats.norm.ppf(np.random.rand(N))\n\nend_prices = S * np.exp((r - 0.5 * sigma2) * T + sigma * np.sqrt(T) * Z)\n\n# Calculate the portfolio value at expiry for a call option using the Black-Scholes formula\n\ncall_values = np.maximum(end_prices - K, 0) * np.exp(-r * T)\n\n# Calculate the 95% VaR using the 5th percentile of the portfolio values\n\nvar_95 = np.percentile(call_values - S, 5)\n\nprint(f\"The 95% VaR for the options portfolio is: {-var_95:.2f}\")\n\n```", "```pypython\n\nfrom scipy.stats import genextreme\n\n# Assume 'returns' is an array of daily returns for the underlying asset\n\n# Fit the Generalized Extreme Value (GEV) distribution to the worst 1% of returns\n\ntail_data = np.sort(returns)[:int(0.01 * len(returns))]\n\nc, loc, scale = genextreme.fit(-tail_data)\n\n# The 'c' parameter determines the shape of the tail of the distribution\n\n# 'loc' and 'scale' adjust the location and scale of the distribution to fit the data\n\n# Now, we can estimate the Value at Risk using the fitted GEV distribution\n\n# We calculate the VaR at a very high confidence level, such as 99.9%\n\nvar_999 = genextreme.ppf(0.001, c, loc=loc, scale=scale)\n\nprint(f\"The 99.9% VaR, accounting for extreme values, is: {-var_999:.2f}\")\n\n```", "```pypython\n\nimport numpy as np\n\nimport pandas as pd\n\nfrom historical_data import market_data\n\n# Assume 'market_data' is a DataFrame containing historical prices of assets in our portfolio\n\n# Calculate daily returns\n\ndaily_returns = market_data.pct_change().dropna()\n\n# Calculate historical VaR at 95% confidence level\n\nvar_95 = np.percentile(daily_returns, 5)\n\n# Simulate the portfolio value\n\ninitial_portfolio_value = 1e7Â  # $10,000,000\n\nportfolio_returns = daily_returns.dot(portfolio_weights)\n\nportfolio_value = initial_portfolio_value * (1 + portfolio_returns).cumprod()\n\n# Identify days where the actual loss exceeded the VaR estimate\n\nexceedances = portfolio_value < (initial_portfolio_value - initial_portfolio_value * var_95)\n\n# Calculate the exceedance rate\n\nexceedance_rate = exceedances.sum() / len(exceedances)\n\nprint(f\"VaR exceedance rate at 95% confidence level is: {exceedance_rate:.2%}\")\n\n```", "```pypython\n\nimport numpy as np\n\n# Assume 'daily_returns' is a numpy array of portfolio daily returns\n\n# Calculate VaR at 95% confidence level\n\nvar_95 = np.percentile(daily_returns, 5)\n\n# Calculate CVaR by averaging the losses exceeding the 95th percentile VaR\n\ncvar_95 = daily_returns[daily_returns <= var_95].mean()\n\nprint(f\"CVaR at 95% confidence level is: {cvar_95:.2%}\")\n\n```", "```pypython\n\nimport pandas as pd\n\nimport numpy as np\n\n# Assume 'options_portfolio' is a DataFrame with our current options positions\n\n# 'market_scenarios' is a DataFrame with various scenarios and their impact on market factors\n\n# Example market scenarios: a sharp rise in volatility, a sudden drop in the underlying asset price\n\nmarket_scenarios = pd.DataFrame({\n\n'Scenario': ['Volatility Spike', 'Market Crash'],\n\n'Underlying Change (%)': [0, -20],\n\n'Volatility Change (%)': [25, 50]\n\n})\n\n# Function to evaluate the portfolio under different scenarios\n\ndef evaluate_portfolio_scenarios(portfolio, scenarios):\n\nresults = []\n\nfor _, scenario in scenarios.iterrows():\n\n# Adjust the underlying price and volatility based on the scenario\n\nadjusted_portfolio = portfolio.copy()\n\nadjusted_portfolio['Adjusted Price'] = portfolio['Underlying Price'] * (1 + scenario['Underlying Change (%)'] / 100)\n\nadjusted_portfolio['Adjusted Volatility'] = portfolio['Volatility'] * (1 + scenario['Volatility Change (%)'] / 100)\n\n# Recalculate the value of the options based on the adjusted price and volatility\n\nadjusted_portfolio['Adjusted Value'] = calculate_options_value(adjusted_portfolio['Adjusted Price'], adjusted_portfolio['Adjusted Volatility'])\n\n# Aggregate the total value of the portfolio under the scenario\n\ntotal_value = adjusted_portfolio['Adjusted Value'].sum()\n\nresults.append((scenario['Scenario'], total_value))\n\nreturn pd.DataFrame(results, columns=['Scenario', 'Portfolio Value'])\n\n# Evaluate our portfolio under the defined market scenarios\n\nscenario_results = evaluate_portfolio_scenarios(options_portfolio, market_scenarios)\n\nprint(scenario_results)\n\n```"]