["```pypython\n\nclass OptionContract:\n\ndef __init__(self, symbol, strike, expiration, option_type):\n\nself.symbol = symbol\n\nself.strike = strike\n\nself.expiration = expiration\n\nself.option_type = option_type\n\nself.position = 0\n\ndef open_position(self, quantity):\n\nself.position += quantity\n\ndef close_position(self):\n\nrealized_pnl = self.calculate_pnl()\n\nself.position = 0\n\nreturn realized_pnl\n\ndef calculate_pnl(self):\n\n# Complex calculation based on market price, strike, and option type\n\n```", "```pypython\n\nclass EuropeanOption(OptionContract):\n\ndef calculate_pnl(self):\n\n# Specific PnL calculation for European options\n\npass\n\n```", "```pypython\n\nclass FinancialInstrument:\n\nasset_class = 'General'\n\ndef __init__(self, ticker, price):\n\nself.ticker = ticker\n\nself.price = price\n\ndef get_market_value(self, quantity):\n\nreturn quantity * self.price\n\n```", "```pypython\n\napple_stock = FinancialInstrument('AAPL', 150)\n\n```", "```pypython\n\nclass Equity(FinancialInstrument):\n\nasset_class = 'Equity'\n\ndef __init__(self, ticker, price, dividend_yield):\n\nsuper().__init__(ticker, price)\n\nself.dividend_yield = dividend_yield\n\ndef annual_dividend(self, quantity):\n\nreturn quantity * self.price * self.dividend_yield\n\n```", "```pypython\n\ndef expected_annual_return(instruments, quantity):\n\nfor instrument in instruments:\n\nif isinstance(instrument, Equity):\n\nprint(f'{instrument.ticker}:',\n\ninstrument.get_market_value(quantity) + instrument.annual_dividend(quantity))\n\nelse:\n\nprint(f'{instrument.ticker}:',\n\ninstrument.get_market_value(quantity))\n\nportfolio = [apple_stock, Equity('MSFT', 250, 0.01)]\n\nexpected_annual_return(portfolio, 100)\n\n```", "```pypython\n\nclass Portfolio:\n\ndef __init__(self):\n\nself.__holdings = {}  # Private attribute\n\ndef add_instrument(self, instrument, quantity):\n\nself.__holdings[instrument.ticker] = self.__holdings.get(instrument.ticker, 0) + quantity\n\ndef __calculate_value(self):  # Private method\n\nreturn sum(instrument.market_value for instrument in self.__holdings.values())\n\ndef report_value(self):\n\nvalue = self.__calculate_value()\n\nprint(f\"The total market value of the portfolio is: ${value:.2f}\")\n\n```", "```pypython\n\nfrom abc import ABC, abstractmethod\n\nclass FinancialInstrument(ABC):\n\n@abstractmethod\n\ndef get_market_value(self):\n\npass\n\n@abstractmethod\n\ndef get_risk_profile(self):\n\npass\n\n```", "```pypython\n\nclass OptionContract:\n\ndef __init__(self, strike, premium):\n\nself.strike = strike\n\nself.premium = premium\n\ndef __repr__(self):\n\nreturn f\"OptionContract(strike={self.strike}, premium={self.premium})\"\n\ndef __add__(self, other):\n\nif isinstance(other, OptionContract):\n\nreturn OptionContract(min(self.strike, other.strike), self.premium + other.premium)\n\nreturn NotImplemented\n\ndef __eq__(self, other):\n\nreturn self.strike == other.strike and self.premium == other.premium\n\n```", "```pypython\n\nclass MarketDataFeed:\n\n_instance = None\n\ndef __new__(cls):\n\nif cls._instance is None:\n\ncls._instance = super(MarketDataFeed, cls).__new__(cls)\n\n# Initialization can be done here\n\nreturn cls._instance\n\n```", "```pypython\n\nclass OptionFactory:\n\n@staticmethod\n\ndef get_option(option_type, strike, expiration):\n\nif option_type == \"call\":\n\nreturn CallOption(strike, expiration)\n\nelif option_type == \"put\":\n\nreturn PutOption(strike, expiration)\n\nraise ValueError(\"Invalid option type\")\n\n```", "```pypython\n\nclass TradeSignal:\n\ndef __init__(self):\n\nself._observers = []\n\ndef attach(self, observer):\n\nself._observers.append(observer)\n\ndef notify(self):\n\nfor observer in self._observers:\n\nobserver.update(self)\n\n# Other methods to emit signals\n\n```", "```pypython\n\nclass TradingStrategy:\n\ndef execute(self):\n\npass\n\nclass MeanReversionStrategy(TradingStrategy):\n\ndef execute(self):\n\n# Implementation for mean reversion strategy\n\nclass TrendFollowingStrategy(TradingStrategy):\n\ndef execute(self):\n\n# Implementation for trend following strategy\n\n# Context that uses strategy\n\nclass TradingBot:\n\ndef __init__(self, strategy):\n\nself._strategy = strategy\n\ndef place_trades(self):\n\nself._strategy.execute()\n\n```"]