["```pypython\n\nimport numpy as np\n\nfrom scipy.stats import norm\n\ndef black_scholes_call(S, K, T, r, sigma):\n\n# Time to expiry as a fraction of year\n\nt = T / 365.0\n\n# Calculating d1 and d2\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * t) / (sigma * np.sqrt(t))\n\nd2 = d1 - sigma * np.sqrt(t)\n\n# Calculating the call option price\n\ncall_price = (S * norm.cdf(d1) - K * np.exp(-r * t) * norm.cdf(d2))\n\nreturn call_price\n\n# Example usage with hypothetical values\n\ncurrent_price = 100  # Current price of the underlying asset\n\nstrike_price = 105  # Strike price of the option\n\ntime_to_expiry = 30  # Time to expiry in days\n\nrisk_free_rate = 0.01  # Annual risk-free interest rate\n\nvolatility = 0.2  # Volatility of the underlying asset\n\ncall_option_price = black_scholes_call(current_price, strike_price, time_to_expiry, risk_free_rate, volatility)\n\nprint(f\"The Black-Scholes call option price is: {call_option_price:.2f}\")\n\n```", "```pypython\n\nfrom scipy.stats import norm\n\ndef black_scholes(S, K, T, r, sigma, option_type='call'):\n\n\"\"\"\n\nCalculate the Black-Scholes option price for a call or put option.\n\nParameters:\n\nS (float): Current asset price\n\nK (float): Option strike price\n\nT (float): Time to maturity (in years)\n\nr (float): Risk-free interest rate (annual)\n\nsigma (float): Volatility of the underlying asset (annual)\n\noption_type (str): 'call' for call option, 'put' for put option\n\nReturns:\n\nfloat: Black-Scholes option price\n\n\"\"\"\n\n# Calculate d1 and d2 parameters\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\nd2 = d1 - sigma * np.sqrt(T)\n\n# Calculate option price based on type\n\nif option_type == 'call':\n\noption_price = (S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2))\n\nelif option_type == 'put':\n\noption_price = (K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1))\n\nelse:\n\nraise ValueError(\"Invalid option type. Use 'call' or 'put'.\")\n\nreturn option_price\n\n# Example usage:\n\noption_price = black_scholes(100, 110, 1, 0.05, 0.25, 'call')\n\nprint(f\"The Black-Scholes price for the call option is: {option_price:.2f}\")\n\n```", "```pypython\n\nimport pandas as pd\n\n# Sample market data (for illustration purposes only)\n\nmarket_data = {\n\n'Date': pd.date_range(start='2022-01-01', periods=5, freq='D'),\n\n'Asset_Price': [100, 102, 104, 103, 105],\n\n'Implied_Volatility': [0.2, 0.19, 0.21, 0.22, 0.2]\n\n}\n\ndf_market = pd.DataFrame(market_data)\n\ndf_market['Option_Price'] = df_market.apply(lambda row: black_scholes(\n\nrow['Asset_Price'], 110, 1, 0.05, row['Implied_Volatility'], 'call'), axis=1)\n\nprint(df_market[['Date', 'Asset_Price', 'Implied_Volatility', 'Option_Price']])\n\n```", "```pypython\n\ndef compute_delta(S, K, T, r, sigma, option_type='call'):\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\nif option_type == 'call':\n\nreturn norm.cdf(d1)\n\nelif option_type == 'put':\n\nreturn -norm.cdf(-d1)\n\n```", "```pypython\n\ndef compute_gamma(S, K, T, r, sigma):\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\nreturn norm.pdf(d1) / (S * sigma * np.sqrt(T))\n\n```", "```pypython\n\ndef compute_theta(S, K, T, r, sigma, option_type='call'):\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\nd2 = d1 - sigma * np.sqrt(T)\n\nif option_type == 'call':\n\nreturn -S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) - r * K * np.exp(-r * T) * norm.cdf(d2)\n\nelif option_type == 'put':\n\nreturn -S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) + r * K * np.exp(-r * T) * norm.cdf(-d2)\n\n```", "```pypython\n\ndef compute_vega(S, K, T, r, sigma):\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\nreturn S * norm.pdf(d1) * np.sqrt(T)\n\n```", "```pypython\n\ndef compute_rho(S, K, T, r, sigma, option_type='call'):\n\nd2 = (np.log(S / K) + (r - 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\nif option_type == 'call':\n\nreturn K * T * np.exp(-r * T) * norm.cdf(d2)\n\nelif option_type == 'put':\n\nreturn -K * T * np.exp(-r * T) * norm.cdf(-d2)\n\n```", "```pypython\n\nfrom scipy.stats import norm\n\nimport numpy as np\n\ndef black_scholes(S, K, T, r, sigma, option_type='call'):\n\n\"\"\"\n\nS: Current stock price\n\nK: Strike price\n\nT: Time to expiration in years\n\nr: Risk-free interest rate\n\nsigma: Volatility of the stock\n\noption_type: 'call' or 'put'\n\n\"\"\"\n\n# Calculate d1 and d2 parameters\n\nd1 = (np.log(S / K) + (r + sigma  2 / 2) * T) / (sigma * np.sqrt(T))\n\nd2 = d1 - sigma * np.sqrt(T)\n\n# Calculate the price of the call or put option\n\nif option_type == 'call':\n\noption_price = (S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2))\n\nelse:\n\noption_price = (K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1))\n\nreturn option_price\n\n```", "```pypython\n\nS = 100  # Current stock price\n\nK = 105  # Strike price\n\nT = 1    # Time to expiration (1 year)\n\nr = 0.05 # Risk-free interest rate (5%)\n\nsigma = 0.20 # Volatility (20%)\n\ncall_option_price = black_scholes(S, K, T, r, sigma, option_type='call')\n\nprint(f\"The Black-Scholes price of the European call option is: ${call_option_price:.2f}\")\n\n```", "```pypython\n\ndef calculate_delta(S, K, T, r, sigma, option_type='call'):\n\nd1 = (np.log(S / K) + (r + sigma  2 / 2) * T) / (sigma * np.sqrt(T))\n\nif option_type == 'call':\n\nreturn norm.cdf(d1)\n\nelse:\n\nreturn -norm.cdf(-d1)\n\n```", "```pypython\n\n# Assume our current option has the following Greeks:\n\ndelta = 0.5\n\ngamma = 0.1\n\ntheta = -0.05\n\nvega = 1.2\n\nrho = 0.25\n\n# Let's consider a hypothetical market movement scenario:\n\nchange_in_stock_price = 1.00  # $1 increase in stock price\n\nchange_in_volatility = 0.02   # 2% increase in volatility\n\nchange_in_time = 1/365        # One day passes\n\nchange_in_interest_rate = 0.01 # 1% increase in interest rate\n\n# Calculate the theoretical change in option's price:\n\nchange_in_option_price = (delta * change_in_stock_price +\n\ngamma/2 * change_in_stock_price2 +\n\ntheta * change_in_time +\n\nvega * change_in_volatility +\n\nrho * change_in_interest_rate)\n\n```"]