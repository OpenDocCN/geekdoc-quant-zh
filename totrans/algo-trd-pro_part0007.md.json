["```pypython\n\n# Assuming 'stock_prices' is a pandas Series of stock prices and 'put_option_premium' is known\n\nstock_position_cost = stock_prices.iloc[-1] * number_of_shares\n\nput_option_cost = put_option_premium * number_of_shares\n\n# Calculate the protected portfolio value assuming the put's strike price is 'put_strike_price'\n\nprotected_value = max((stock_prices.iloc[-1] - put_strike_price) * number_of_shares, 0)\n\ntotal_protected_value = stock_position_cost + protected_value - put_option_cost\n\nprint(f\"Total protected portfolio value: {total_protected_value}\")\n\n```", "```pypython\n\n# Assuming 'stock_prices' is a pandas Series of stock prices and 'call_option_premium' is known\n\nincome_generated = call_option_premium * number_of_shares\n\n# Calculate the new breakeven stock price after receiving option premiums\n\nnew_breakeven_price = (stock_position_cost - income_generated) / number_of_shares\n\nprint(f\"New breakeven price after selling covered calls: {new_breakeven_price}\")\n\n```", "```pypython\n\n# Assume 'portfolio_delta' is the current delta of the portfolio, and 'desired_delta' is the target\n\n# 'option_delta' is known for the option used to hedge\n\n# Calculate the number of options needed to hedge the portfolio to the desired delta\n\noptions_needed = (desired_delta - portfolio_delta) / option_delta\n\nprint(f\"Number of options needed for delta hedging: {options_needed}\")\n\n```", "```pypython\n\nfrom scipy.stats import norm\n\n# Assuming we have the necessary option and market parameters such as stock price 'S', strike price 'K',\n\n# time to expiration 'T', risk-free rate 'r', and implied volatility 'sigma'\n\n# Calculate d1 used in the Black-Scholes formula\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma  2) * T) / (sigma * np.sqrt(T))\n\n# Calculate the option delta\n\ndelta = norm.cdf(d1)\n\nprint(f\"Delta of the option: {delta}\")\n\n```", "```pypython\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Define the underlying asset price range\n\nunderlying_prices = np.linspace(50, 150, 100)\n\nstrike_price = 100\n\npremium_received = 5\n\n# Calculate the profit or loss for writing a put option at various underlying prices\n\npnl = np.where(underlying_prices < strike_price, strike_price - underlying_prices - premium_received, -premium_received)\n\n# Plot the risk profile\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(underlying_prices, pnl, label='Written Put Option PnL')\n\nplt.axhline(0, color='grey', lw=1, ls='--')\n\nplt.title('Risk Profile of a Written Put Option')\n\nplt.xlabel('Underlying Asset Price at Expiration')\n\nplt.ylabel('Profit / Loss')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Calculate the profit or loss for buying a call option at various underlying prices\n\npnl = np.where(underlying_prices > strike_price, underlying_prices - strike_price - premium_paid, -premium_paid)\n\n# Plot the risk profile for a bought call option\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(underlying_prices, pnl, label='Bought Call Option PnL', color='green')\n\nplt.axhline(0, color='grey', lw=1, ls='--')\n\nplt.title('Risk Profile of a Bought Call Option')\n\nplt.xlabel('Underlying Asset Price at Expiration')\n\nplt.ylabel('Profit / Loss')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Assume a portfolio value and select an at-the-money put option strike price\n\nportfolio_value = 1000000  # $1 million\n\natm_strike_price = portfolio_value\n\n# Define the option's cost (as a percentage of the portfolio value)\n\noption_cost_percent = 1  # 1%\n\noption_cost = portfolio_value * option_cost_percent / 100\n\n# Calculate the new portfolio value at different levels of market decline\n\nmarket_declines = np.linspace(0, -0.5, 100)  # 50% decline\n\nnew_portfolio_values = portfolio_value * (1 + market_declines)\n\n# Calculate the portfolio value with hedging at different levels of market decline\n\nhedged_portfolio_values = np.maximum(new_portfolio_values, atm_strike_price) - option_cost\n\n# Plot the hedging outcome\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(market_declines, new_portfolio_values, label='Unhedged Portfolio Value', linestyle='--')\n\nplt.plot(market_declines, hedged_portfolio_values, label='Hedged Portfolio Value', color='magenta')\n\nplt.axhline(atm_strike_price - option_cost, color='red', lw=1, ls='--', label='Hedge Protection Level')\n\nplt.title('Portfolio Value with and without Hedging')\n\nplt.xlabel('Market Decline')\n\nplt.ylabel('Portfolio Value')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\nimport yfinance as yf\n\n# Retrieve historical data for a stock (e.g., AAPL)\n\nticker = 'AAPL'\n\nstock_data = yf.download(ticker, start='2022-01-01', end='2022-12-31')\n\n# Assume holding 100 shares and writing 1 call option contract for every 100 shares held\n\nshares_held = 100\n\noption_premium_received = 5  # $5 per share\n\n# Calculate income generated from option premiums (100 shares * $5/share)\n\nincome_from_premiums = shares_held * option_premium_received\n\n# Assume the call option has a strike price 10% above the current stock price\n\nstrike_price = stock_data['Close'].iloc[-1] * 1.10\n\n# Calculate potential capital appreciation up to the strike price\n\ncapital_appreciation = (strike_price - stock_data['Close'].iloc[-1]) * shares_held\n\n# Total income potential combining premiums and capital appreciation\n\ntotal_income_potential = income_from_premiums + capital_appreciation\n\n# Output the total income potential\n\nprint(f\"Total income potential from covered call strategy: ${total_income_potential:.2f}\")\n\n```", "```pypython\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Simulated parameters for the underlying asset\n\ncurrent_price = 100\n\nexpected_return = 0.05\n\nvolatility = 0.2\n\ntime_horizon = 1  # 1 year\n\n# Simulated parameters for the OTM put option\n\nstrike_price = 80  # Assuming a 20% drop from the current price\n\nput_option_premium = 2\n\n# Simulate the asset price at the end of the time horizon using a random walk\n\nnp.random.seed(42)  # For reproducibility\n\nfinal_price = current_price * np.exp((expected_return - 0.5 * volatility2) * time_horizon + volatility * np.random.normal(0, np.sqrt(time_horizon)))\n\n# Payoff from the put option at expiration\n\npayoff_put_option = max(0, strike_price - final_price)\n\n# Total cost of the put option (premium paid)\n\ntotal_cost_put_option = put_option_premium\n\n# Net payoff from the put option after accounting for the premium paid\n\nnet_payoff_put_option = max(0, payoff_put_option - total_cost_put_option)\n\n# Plot the payoff profile of the put option\n\nplt.figure(figsize=(10, 6))\n\nplt.plot([current_price, final_price], [0, net_payoff_put_option], 'ro--')\n\nplt.title('Payoff Profile of an OTM Put Option')\n\nplt.xlabel('Asset Price at Expiration')\n\nplt.ylabel('Net Payoff')\n\nplt.grid(True)\n\nplt.show()\n\n# Output the simulated final asset price and net payoff\n\nprint(f\"Simulated final asset price: ${final_price:.2f}\")\n\nprint(f\"Net payoff from the put option: ${net_payoff_put_option:.2f}\")\n\n```", "```pypython\n\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\n# Portfolio without options\n\nportfolio_returns = np.random.normal(0.1, 0.15, 1000)\n\n# Portfolio with options\n\n# Assume the options strategy has a lower expected return but higher Sharpe ratio\n\noptions_strategy_returns = np.random.normal(0.07, 0.05, 1000)\n\n# Combine the portfolios\n\ncombined_portfolio_returns = 0.7 * portfolio_returns + 0.3 * options_strategy_returns\n\n# DataFrames for returns\n\ndf_returns = pd.DataFrame({\n\n'Portfolio': portfolio_returns,\n\n'Options Strategy': options_strategy_returns,\n\n'Combined Portfolio': combined_portfolio_returns\n\n})\n\n# Calculate cumulative returns\n\ndf_cumulative = (1 + df_returns).cumprod()\n\n# Plot the cumulative returns\n\ndf_cumulative.plot(figsize=(12, 8))\n\nplt.title('Cumulative Returns of Portfolio with and without Options Diversification')\n\nplt.xlabel('Number of Trading Days')\n\nplt.ylabel('Cumulative Return')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n# Calculate Sharpe ratios\n\nsharpe_portfolio = df_returns['Portfolio'].mean() / df_returns['Portfolio'].std()\n\nsharpe_options_strategy = df_returns['Options Strategy'].mean() / df_returns['Options Strategy'].std()\n\nsharpe_combined = df_returns['Combined Portfolio'].mean() / df_returns['Combined Portfolio'].std()\n\nprint(f\"Sharpe Ratio of the Portfolio: {sharpe_portfolio:.2f}\")\n\nprint(f\"Sharpe Ratio of the Options Strategy: {sharpe_options_strategy:.2f}\")\n\nprint(f\"Sharpe Ratio of the Combined Portfolio: {sharpe_combined:.2f}\")\n\n```"]