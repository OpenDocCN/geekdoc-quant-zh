["```pypython\n\nimport os\n\nimport tensorflow as tf\n\nfrom tensorflow.python.client import device_lib\n\ndef get_available_gpus():\n\nlocal_device_protos = device_lib.list_local_devices()\n\nreturn [x.name for x in local_device_protos if x.device_type == 'GPU']\n\ndef check_hardware_requirements():\n\n# Check CPU information\n\nprint('CPU Information:')\n\nprint('Cores:', os.cpu_count())\n\n# Check RAM information\n\nprint('RAM Information:')\n\nprint('Total:', psutil.virtual_memory().total / (1024.0 3),\" GB\")\n\n# Check GPU Information\n\nprint('\\nGPU Information:')\n\ngpus = tf.config.experimental.list_physical_devices('GPU')\n\nfor i in range(len(gpus)):\n\nprint(gpus[i])\n\ncheck_hardware_requirements()\n\n```", "```pypython\n\nimport alpaca_trade_api as tradeapi\n\napi = tradeapi.REST('APCA-API-KEY-ID', 'APCA-API-SECRET-KEY', base_url='https://paper-api.alpaca.markets')\n\naccount = api.get_account()\n\nprint(account.status)\n\n```", "```pypython\n\nfrom zipline import run_algorithm\n\nfrom zipline.api import order_target, record, symbol\n\nfrom datetime import datetime\n\nimport pytz\n\ndef initialize(context):\n\ncontext.asset = symbol('AAPL')\n\ndef handle_data(context, data):\n\norder_target(context.asset, 100)\n\nstart = datetime(2010, 1, 1, 0, 0, 0, 0, pytz.utc)\n\nend = datetime(2015, 1, 1, 0, 0, 0, 0, pytz.utc)\n\nrun_algorithm(start=start, end=end, initialize=initialize, handle_data=handle_data, capital_base=10000)\n\n```", "```pypython\n\nimport psycopg2\n\nfrom psycopg2 import sql\n\nconn = psycopg2.connect(user=\"\", password=\"\",host=\"\",port=\"\",database=\"\")\n\ncur = conn.cursor()\n\ninsert = sql.SQL(\"INSERT INTO stocks (date, open, high, low, close, volume) VALUES {}\").format(\n\nsql.SQL(',').join(sql.SQL(\"('{}', '{}', '{}', '{}', '{}', '{}')\").format(\n\nsql.SQL(val['date']),\n\nsql.SQL(val['1\\. open']),\n\nsql.SQL(val['2\\. high']),\n\nsql.SQL(val['3\\. low']),\n\nsql.SQL(val['4\\. close']),\n\nsql.SQL(val['5\\. volume'])) for key, val in data.items()))\n\ncur.execute(insert)\n\nconn.commit()\n\n```", "```pypython\n\nfrom Crypto.Cipher import AES\n\nimport base64\n\nBLOCK_SIZE = 16\n\nPADDING = '{'\n\npad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING\n\nEncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))\n\nDecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)\n\n# Generate a random secret key\n\nsecret = os.urandom(BLOCK_SIZE)\n\n# Create a cipher object using the secret\n\ncipher = AES.new(secret)\n\n# Encode a string\n\nencoded = EncodeAES(cipher, 'password')\n\n```", "```pypython\n\nimport psutil\n\n# returns a named tuple with fields representing the overall system CPU utilization as a percentage\n\ncpu_usage = psutil.cpu_percent(interval=1)\n\nprint(f'CPU Usage: {cpu_usage} %')\n\n```", "```pypython\n\nimport smtplib, ssl\n\ndef send_email_alert(message):\n\nport = 465  # secure SMTP port\n\nsmtp_server = \"smtp.gmail.com\"\n\nsender_email = \"my@gmail.com\"  # sender email\n\nreceiver_email = \"receiver@gmail.com\"  # recipient email\n\npassword = input(\"Type your password and press enter: \")\n\n# Create a secure SSL context\n\ncontext = ssl.create_default_context()\n\nwith smtplib.SMTP_SSL(smtp_server, port, context=context) as server:\n\nserver.login(sender_email, password)\n\nserver.sendmail(sender_email, receiver_email, message)\n\n```", "```pypython\n\ntry:\n\n# block of code that can potentially raise an error\n\nexcept Exception as e:\n\n# block of code that deals with the error\n\nfinally:\n\n# block of code that runs regardless of whether an exception was raised or not.\n\n```", "```pypython\n\nif portfolio_drawdown > max_accepted_drawdown:\n\nstop_trading()\n\n```", "```pypython\n\nfrom ib.opt import ibConnection, message\n\nfrom ib.ext.Contract import Contract\n\nfrom ib.ext.Order import Order\n\ndef create_contract(symbol, sec_type, exch, prim_exch, curr):\n\ncontract = Contract()\n\ncontract.m_symbol = symbol\n\ncontract.m_secType = sec_type\n\ncontract.m_exchange = exch\n\ncontract.m_primaryExch = prim_exch\n\ncontract.m_currency = curr\n\nreturn contract\n\ndef create_order(order_type, quantity, action):\n\norder = Order()\n\norder.m_orderType = order_type\n\norder.m_totalQuantity = quantity\n\norder.m_action = action\n\nreturn order\n\nconn = ibConnection(port=7497, clientId=999)\n\nconn.connect()\n\ncontract = create_contract('GOOG', 'STK', 'SMART', 'SMART', 'USD')\n\norder = create_order('MKT', 1, 'BUY')\n\nconn.placeOrder(conn.nextValidId(), contract, order)\n\nconn.disconnect()\n\n```", "```py python\n\nimport os\n\nimport pyRofex\n\n# Initialize environment\n\nenvironment = os.getenv(\"ROFEX_ENVIRONMENT\")\n\ntoken = os.getenv(\"ROFEX_TOKEN\")\n\n# Initialize connection with the trading engine\n\npyRofex.initialize(user='YourUsername', password='YourPassword', account='YourAccount', environment=pyRofex.Environments.REMARKET)\n\n# Define the new order\n\nnew_order = {\n\n\"securityId\": \"ROFX/DOJun19\",\n\n\"price\": 42.56,\n\n\"orderQty\": 5,\n\n\"ordType\": \"Limit\",\n\n}\n\n# Send the new order to the trading engine\n\nresult = pyRofex.send_order(new_order=new_order, account=\"YourAccount\")\n\n# Print out the result\n\nprint(result)\n\n```", "```pypython\n\nimport boto3\n\n# Set up connection with AWS\n\nec2 = boto3.resource('ec2')\n\n# Create a new EC2 instance\n\ninstances = ec2.create_instances(\n\nImageId='ami-0abcdef1234567890',   # use the appropriate image ID\n\nMinCount=1,\n\nMaxCount=2,   # Create two redundant instances\n\nInstanceType='t2.micro',\n\nKeyName='your-key',  # use the appropriate key\n\n)\n\n# Print the instances for confirmation\n\nfor instance in instances:\n\nprint(instance.id, instance.instance_type)\n\n```", "```pypython\n\nimport netifaces\n\nimport subprocess\n\n# Get a list of network interfaces\n\ninterfaces = netifaces.interfaces()\n\n# Check if the primary interface is up\n\nif 'eth0' in interfaces:\n\nprint('Primary interface is up.')\n\nelse:\n\nprint('Primary interface is down. Switching to backup...')\n\nsubprocess.run(['ifup', 'eth1'])  # Activate the backup interface\n\n```", "```pypython\n\nimport schedule\n\nimport time\n\ndef system_check():\n\nprint(\"Running system check...\")\n\n# Run your checks here\n\nschedule.every().day.at(\"01:00\").do(system_check)  # Schedule a system check every day at 1 am\n\nwhile True:\n\nschedule.run_pending()  # Keep the script running to execute scheduled tasks\n\ntime.sleep(1)\n\n```", "```pypython\n\nimport os\n\nimport time\n\nfolder_path = '/path/to/your/data/folder'\n\nfiles_in_folder = os.listdir(folder_path)\n\nfor file in files_in_folder:\n\nfull_file_path = os.path.join(folder_path, file)\n\n# If file hasn't been modified in the last 60 days\n\nif os.path.getmtime(full_file_path) < time.time() - 60 * 86400:\n\nos.remove(full_file_path)  # Delete the file\n\n```"]