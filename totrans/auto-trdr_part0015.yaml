- en: Chapter 12\. Real-Time Data Processing in Algorithmic Trading
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章：算法交易中的实时数据处理
- en: The Importance of Real-Time Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据的重要性
- en: 'The phrase "time is money", while trite, is hard to contest, especially in
    the realm of Algorithmic Trading. Every second, the financial markets communicate
    a wealth of information like price, volume, and trade size through data streams.
    Decoding, interpreting, and actioning these data sets all hinge on one crucial
    parameter: timeliness. Thus, one may argue that the importance of real-time data
    to an algorithmic trader is equivalent to the vitality of a compass to a mariner
    traversing turbulent seas.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “时间就是金钱”这句话虽然陈腐，但在算法交易领域却难以反驳。每一秒，金融市场通过数据流传达着丰富的信息，如价格、交易量和交易规模。解码、解释和执行这些数据集都依赖于一个关键参数：及时性。因此，可以说，对于算法交易者而言，实时数据的重要性相当于航海者在波涛汹涌的海洋中航行时所需的指南针的生命力。
- en: Monetising market data is about speed, and the acceleration at which real-time
    data is channeled into trading algorithms can be the deciding factor between reaping
    a windfall or bearing a loss with algorithmic trading. Because high-frequency
    trading (HFT) algorithms rely on real-time data to execute trades within microseconds,
    a delay of even a fraction of a second can mirror the avalanche effect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 货币化市场数据关乎速度，而实时数据传入交易算法的加速程度可能是获得暴利或在算法交易中遭受损失的决定性因素。由于高频交易（HFT）算法依赖于实时数据在微秒内执行交易，哪怕是片刻的延迟也可能产生雪崩效应。
- en: Equally imperative is the quality of real-time data. Quality data injects clarity
    and accuracy into your trading decisions. Real-time data cleansed of inconsistencies,
    inaccuracies, or duplications is the lifeblood of any reliable trading algorithm.
    Therefore, understanding the importance of real-time data is only the tip of the
    iceberg. A great success in algorithmic trading is penned down by how effectively
    traders receive, utilise, and respond to this real-time data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据的质量同样至关重要。优质数据为你的交易决策注入清晰度和准确性。清除不一致性、不准确性或重复性的实时数据是任何可靠交易算法的命脉。因此，理解实时数据的重要性只是冰山一角。算法交易的伟大成功取决于交易者如何有效接收、利用和响应这些实时数据。
- en: A not-so-obvious advantage, but nonetheless significant aspect of real-time
    data, is its utility in the post-trade analysis. By examining real-time data recorded
    at the time of a trade, traders can dissect their trading success or failure,
    picking apart vital insights to tweak and fine-tune their future trading strategy.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据的一个不太明显但同样重要的优势是其在交易后分析中的实用性。通过检查交易时记录的实时数据，交易者可以剖析自己的交易成功或失败，从中提取重要见解，以调整和优化未来的交易策略。
- en: While the quest for the fastest, most accurate data feeds is incessant, let's
    not forget the grave responsibility that comes with wielding real-time data. Market
    data is a crucial asset, and its misuse or abuse can have alarming repercussions,
    both on the regulatory front and the economic scope.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对最快、最准确的数据源的追求不断进行，但我们也不能忘记使用实时数据所伴随的重大责任。市场数据是一项重要资产，其误用或滥用可能会对监管和经济范围产生令人担忧的影响。
- en: 'Let''s touch upon an example of how real-time data might be utilised within
    a Python-based trading algorithm:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个实时数据在基于Python的交易算法中如何被利用的例子：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This basic script uses the yfinance library to fetch the most recent day's data
    for Google's stock. It then extracts the closing price and the trade volume for
    that day, which could be used as a part of an algorithmic trading strategy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基本脚本使用yfinance库获取谷歌股票最近一天的数据。然后提取该日的收盘价和交易量，这可以作为算法交易策略的一部分。
- en: In sum, embarking on the voyage of algorithmic trading without understanding
    the importance of real-time data is akin to venturing into a maze blindfolded.
    Real-time data illuminates the path traders thread on, enabling informed decisions,
    swift responses, and eventually, a prosperous algorithmic trading adventure.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，开始算法交易的旅程而不理解实时数据的重要性，就像蒙着眼睛闯入迷宫。实时数据照亮了交易者的路径，使他们能够做出明智的决策、快速响应，并最终获得繁荣的算法交易冒险。
- en: Data Feeds and Sources
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源和数据馈送
- en: As we stand at the threshold of the Information Age, data has phenomenally emerged
    as the lifeblood of algorithmic trading foretelling a shift from intuition-based
    decision-making to data-driven strategies. But in this ocean of data, what differentiates
    a successful trader is pinpointing relevant noteworthy feeds and reliable data
    sources.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们站在信息时代的门槛上，数据已经惊人地成为算法交易的命脉，预示着从基于直觉的决策转向数据驱动的策略。但在这片数据的海洋中，成功交易者的区别在于能够精准识别相关的重要信息源和可靠的数据来源。
- en: 'For any algorithmic trader, data feeds funnel in a continuous jet of data in
    real-time, and this data can be dissected into two broad categories: market data
    and auxiliary data. Market data, as the name suggests, is the core of trading
    and the catalyst of any algorithm''s decision-making process. It comprises price
    data, historical data, and intraday data, which include the opening price, closing
    price, highs and lows, trading volumes, and many more.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何算法交易者来说，数据源以实时的持续数据流入，且这些数据可以被分为两个大类：市场数据和辅助数据。正如其名，市场数据是交易的核心，是任何算法决策过程的催化剂。它包括价格数据、历史数据和日内数据，后者包括开盘价、收盘价、高低价、交易量等众多信息。
- en: Auxiliary data, on the other hand, is contextual and covers factors that influence
    the financial markets but are not directly part of it. This might include economic
    indicators, news feeds, social media sentiments, or meteorological data, to mention
    a few.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，辅助数据是上下文相关的，涵盖影响金融市场的因素，但并不直接属于金融市场。这可能包括经济指标、新闻源、社交媒体情绪或气象数据等等。
- en: Data sources, the wellsprings of these data feeds, are abundant and diverse.
    They range from stock exchanges like NYSE and NASDAQ, data vendors like Bloomberg
    or Reuters, APIs like Alpha Vantage and Polygon.io, to unconventional sources
    like Twitter for sentiment analysis or even Federal databases for macroeconomic
    indicators.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源，这些数据流的源泉，丰富多样。它们涵盖从纽约证券交易所（NYSE）和纳斯达克（NASDAQ）等交易所，到彭博社或路透社等数据供应商，再到像Alpha
    Vantage和Polygon.io这样的API，甚至包括Twitter等非传统源用于情感分析，或联邦数据库用于宏观经济指标。
- en: 'Python, as a machine-friendly language, is equipped with frameworks and libraries
    to efficiently handle data feeds. Libraries like Pandas and Numpy not only ease
    the process of retrieving and cleaning data, but they also equip the algorithm
    to manipulate and analyse the vast amounts of data with relative ease. For instance,
    here is a simple script to fetch market data using the yfinance library:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一种机器友好的语言，配备了高效处理数据流的框架和库。像Pandas和Numpy这样的库不仅简化了数据获取和清洗的过程，还使算法能够相对轻松地处理和分析大量数据。例如，以下是一个使用yfinance库获取市场数据的简单脚本：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this script, we are pulling the last five days of market data for Apple's
    stock using the yfinance library – a simple yet powerful demonstration of how
    Python can be used to digest data feeds.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们使用yfinance库拉取了苹果股票过去五天的市场数据——这是一个简单而强大的示例，展示了如何使用Python来处理数据源。
- en: However, while choosing data feeds and their sources, traders need to consider
    factors like cost, latency, consistency, and the scope of data provided. One must
    bear in mind that not all data is created equal, and therefore, careful scrutiny
    and selection are paramount. A high-quality real-time data feed could make the
    difference between identifying an emerging trend and missing an optimum trade.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在选择数据源及其来源时，交易者需要考虑成本、延迟、一致性和提供的数据范围等因素。必须牢记，并非所有数据都是平等的，因此仔细审查和选择至关重要。高质量的实时数据源可能在识别新兴趋势和错过最佳交易之间产生巨大差异。
- en: Data Cleansing and Preprocessing
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清洗和预处理
- en: Situated at the heart of any successful algorithmic trading strategy lies a
    process less glamorous, albeit fundamentally crucial - data cleansing and preprocessing.
    As the cogs and wheels of the financial markets continue to spin, datasets - often
    riddled with missing values, irregularities, and noise - flow into the trading
    system. The process of preparing this raw, imperfect data for further analysis
    forms the pivotal stage of data preprocessing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何成功算法交易策略的核心是一个不那么光鲜但至关重要的过程——数据清洗和预处理。随着金融市场的齿轮不断转动，数据集常常充满缺失值、不规则性和噪声，流入交易系统。将这些原始、不完善的数据准备好以进行进一步分析，构成了数据预处理的关键阶段。
- en: Typically, data preprocessing involves steps that make the data 'clean', relevant,
    and ready for analysis. These steps can be categorized broadly as data cleansing,
    data transformation, and data reduction.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数据预处理包括使数据“干净”、相关并准备好进行分析的步骤。这些步骤大致可以分为数据清洗、数据转换和数据减少。
- en: 'Data cleansing, or data cleaning, is the process of ferreting and correcting
    (or removing) corrupt or inaccurate records from a dataset. This may involve handling
    missing values, removing duplicates, correcting inconsistent values, and validating
    and correcting values against a known list of entities. Python''s Pandas library
    offers a robust suite of functions for data cleansing. Here is a simple python
    snippet showcasing the usage of the ''fillna'' method in Pandas for handling missing
    data:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清洗或数据清理是从数据集中查找和纠正（或删除）损坏或不准确记录的过程。这可能涉及处理缺失值、删除重复项、纠正不一致值，以及根据已知实体列表验证和修正值。Python
    的 Pandas 库提供了一套强大的数据清洗函数。以下是一个简单的 Python 代码片段，展示了在 Pandas 中使用 'fillna' 方法处理缺失数据的用法：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The second stage involves data transformation, wherein raw data is transformed
    into a specified format to allow for better algorithmic comprehension and improved
    data analysis. Data transformation operations might include scaling, where data
    values are adjusted within a certain range; aggregation, where summary or aggregate
    operations are applied to the data; and normalization, where data is scaled to
    fall within a small, specified range.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶段涉及数据转换，在此阶段，原始数据被转换为指定格式，以便更好地进行算法理解和改进数据分析。数据转换操作可能包括缩放，其中数据值在某个范围内进行调整；聚合，对数据应用汇总或聚合操作；以及归一化，将数据缩放到一个较小的指定范围内。
- en: Data reduction, the final step, is performed to trim down the data volume by
    removing redundant or less significant data. This helps make the dataset smaller,
    making the algorithm's processing phase more efficient.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 数据减少，最后一步，旨在通过删除冗余或不重要的数据来减少数据量。这有助于缩小数据集，使算法的处理阶段更加高效。
- en: Moving onto the practical implementation of these steps, Python's scikit-learn
    package provides robust and efficient tools for data preprocessing. As does Pandas,
    which we've previously mentioned. There are also other libraries like Numpy and
    SciPy that provide useful features for data preprocessing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤的实际实施中，Python 的 scikit-learn 包提供了强大而高效的数据预处理工具。Pandas 也是如此，我们之前提到过。还有其他一些库，比如
    Numpy 和 SciPy，提供了有用的数据预处理功能。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This Python snippet scales the sample data ‘x’ to have a mean of 0 and a standard
    deviation of 1 by using the ‘scale’ method from the sklearn.preprocessing module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Python 代码片段使用 sklearn.preprocessing 模块中的 ‘scale’ 方法将样本数据 ‘x’ 缩放为均值为 0，标准差为
    1。
- en: 'In conclusion, adeptness at data cleansing and preprocessing - though often
    understated - constitutes a critical competence for any trader aiming to carve
    a successful career in the realm of algorithmic trading. By mastering this stage,
    the trader effectively ensures that his algorithms not only sip from the fountain
    of accurate insight but also reach conclusions quicker and more efficiently. However,
    it''s important to remember the moral that every seasoned trader has emblazoned
    in his mind: ''Garbage in, garbage out''. Even the most sophisticated of algorithms
    can falter if the preprocessing is flawed, making mastering data cleansing and
    preprocessing not just an option, but a necessity for success. As we move forward,
    we''ll delve more into how this preprocessed data is put to use in real-time trading
    scenarios.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，数据清洗和预处理的熟练程度——尽管常被低估——构成了任何希望在算法交易领域开创成功职业的交易者的重要能力。通过掌握这一阶段，交易者有效地确保其算法不仅能从准确的见解中汲取，而且能够更快、更高效地得出结论。然而，重要的是要记住每位经验丰富的交易者心中铭刻的教训：“垃圾进，垃圾出”。即使是最复杂的算法，如果预处理出现问题也会失败，因此掌握数据清洗和预处理不仅是选择，而是成功的必要条件。随着我们前进，我们将深入探讨这些预处理数据在实时交易场景中的应用。
- en: Handling Missing or Outlying Data
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失或异常数据
- en: 'In the algorithmic trading ecosystem, unprocessed data is akin to unmined gold.
    While it holds tremendous potential, it must undergo meticulous refinement before
    it can lend itself to valuable insights. One key challenge is the handling of
    missing or outlying data. Every trader, data scientist, and financial analyst
    knows this all too well: trading data is rarely perfect; it often presents itself
    with missing entries and anomalous outliers. In this , we''ll elucidate practices
    on how to efficiently handle such elusive data quirks.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易生态系统中，未处理的数据类似于未开采的黄金。尽管它蕴含巨大的潜力，但在提供有价值的见解之前，必须经过细致的提炼。一个主要挑战是处理缺失或异常数据。每个交易者、数据科学家和金融分析师都深知这一点：交易数据很少是完美的；它往往伴随着缺失项和异常值。在本文中，我们将阐明如何高效处理这些难以捉摸的数据特征。
- en: '"Missing data" essentially refers to the absence of data value for certain
    variables in an observation. It poses a significant problem in data analysis as
    it could lead to biased or incorrect results if not handled appropriately. So,
    how does one tend to this conundrum? Python, armed with a plethora of libraries
    and functions, provides powerful solutions. Pandas, for instance, offers the ''dropna''
    method to remove observations with missing values.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “缺失数据”本质上指的是观察中某些变量缺少数据值。这在数据分析中构成了一个重大问题，因为如果处理不当，可能导致偏差或不正确的结果。那么，如何处理这个难题呢？Python凭借众多库和函数提供了强大的解决方案。例如，Pandas提供了“dropna”方法来删除缺失值的观察。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The snippet above replaces missing values with mean values in the DataFrame
    df using "dropna".
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码段使用“dropna”在DataFrame df中将缺失值替换为均值。
- en: However, purging all the missing values may not always be the best solution;
    it often depends on the quantity and nature of the missing data. If the missing
    value itself provides crucial information or if the quantity of missing data is
    substantial, imputation, or replacing missing data with substituted values, might
    be a better approach. For imputation, the 'fillna' function in Pandas or the Imputer
    class in the scikit-learn library can be utilized.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，清除所有缺失值并不总是最佳解决方案；这往往取决于缺失数据的数量和性质。如果缺失值本身提供了关键信息，或者缺失数据的数量很大，填补缺失值，即用替代值替换缺失数据，可能是更好的方法。对于填补缺失值，可以使用Pandas中的“fillna”函数或scikit-learn库中的Imputer类。
- en: Outlying data, on the other hand, are values in a dataset that lie at an abnormal
    distance from other values. Just as missing data, outliers too can distort the
    conclusion derived from the data. In financial markets, outliers could result
    from market glitches, extreme events or human error. It is pivotal for a trader
    to apply appropriate outlier handling techniques to maintain the reliability and
    accuracy of the algorithm's output.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，异常数据是指数据集中与其他值距离异常的值。与缺失数据一样，异常值也会扭曲从数据中得出的结论。在金融市场中，异常值可能源于市场故障、极端事件或人为错误。交易者必须应用适当的异常值处理技术，以维护算法输出的可靠性和准确性。
- en: 'Python libraries such as Numpy, Scipy, and Pandas provide methods to identify
    outliers. The Z-score, for example, is an effective mathematical tool to identify
    outliers. Here is how you can use it with Scipy:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python库如Numpy、Scipy和Pandas提供了识别异常值的方法。例如，Z-score是一个有效的数学工具来识别异常值。以下是如何在Scipy中使用它：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Python snippet calculates the Z-score of each value in the data array and
    then identifies the outliers as those with Z-scores more than 2.5 standard deviations
    away from the mean.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python代码段计算数据数组中每个值的Z-score，然后将那些Z-score超过2.5个标准差的值识别为异常值。
- en: Rounding off, we need to remember that missing and outlying data are part and
    parcel of the financial markets. They complicate the data preprocessing step,
    thereby making it as challenging as it is important. Both missing and outlying
    data need careful, systematic handling using the best available techniques and
    tools. Python, with its powerful options, provides a reliable way to tackle this.
    After all, to command the best ship, one must navigate choppy waters. The voyage
    of data processing from raw, unclean data to precise, valuable insights is nothing
    short of an adventurous sea journey. In the next s, we shall venture further into
    other key aspects of algorithmic trading.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们需要记住，缺失和异常数据是金融市场不可或缺的一部分。它们使数据预处理步骤变得复杂，因此这一步骤既具有挑战性又极为重要。缺失和异常数据需要使用最佳可用技术和工具进行细致、系统的处理。Python凭借其强大的选项，提供了一个可靠的解决方案。毕竟，要掌控最好的船只，就必须在波涛汹涌的水域中航行。从原始、不干净的数据到精确、有价值的洞察，这一数据处理的旅程无疑是一场冒险的海洋之旅。在接下来的部分中，我们将进一步探讨算法交易的其他关键方面。
- en: Real-Time Data Analytics
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据分析
- en: In a world that's continuously moving at an accelerated pace, where financial
    exchanges never sleep, the real-time analysis of data is an indispensable component
    of successful algorithmic trading. By the end of this , you'll comprehend how
    real-time data analytics can enhance your trading strategies, optimize the timing
    of trades, and provide unparalleled insight into the intricacies of the financial
    markets.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个持续加速的世界里，金融交易从未入睡，数据的实时分析是成功算法交易不可或缺的组成部分。在本节结束时，你将理解实时数据分析如何提升你的交易策略，优化交易时机，并提供对金融市场复杂性无与伦比的洞察。
- en: Real-time data analytics is a process that involves scrutinizing data as it
    streams in – almost instantaneously. Unearth buried treasure of insights from
    gigabytes of trading data each second, and speedily leverage these insights to
    make quick, informed, and strategic trading decisions. You're pulling back the
    curtain on market operations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据分析是一个过程，涉及在数据流入时几乎瞬时地对其进行审查。每秒钟从数十亿的交易数据中挖掘出埋藏的洞察，并迅速利用这些洞察做出快速、明智和战略性的交易决策。你正在揭开市场运作的面纱。
- en: To venture into real-time data analytics, Python's ecosystem offers a wealth
    of tools at your disposal. Libraries such as Pandas (for data manipulation), NumPy
    (for numerical operations), and Statsmodels (for statistical modeling) all allow
    for complex computations and data processing in real-time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索实时数据分析，Python生态系统提供了丰富的工具供你使用。像Pandas（用于数据处理）、NumPy（用于数值运算）和Statsmodels（用于统计建模）等库，都允许在实时中进行复杂的计算和数据处理。
- en: 'Consider the example below where we use websocket API from Alpaca (a popular
    commission-free trading platform) for real-time price updates:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑下面的例子，我们使用Alpaca（一个受欢迎的免佣金交易平台）的websocket API进行实时价格更新：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this code, we establish a WebSocket connection to receive real-time updates
    about Apple's stock. As any change in price is received immediately, it is then
    converted to a more readable format (uniform timestamp) and printed out along
    with the updated price.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们建立了一个WebSocket连接，以接收关于苹果股票的实时更新。每当接收到价格变化时，它会立即转换为更易读的格式（统一时间戳），并与更新的价格一起打印出来。
- en: 'Let''s take another step forward and try a real-time simple moving average
    calculation using pandas. You can use a deque from the collections package for
    this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向前迈进一步，尝试使用pandas进行实时简单移动平均计算。你可以使用collections包中的deque来实现：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, every time a new price point arrives, it appends the price to the deque
    'prices'. Once we have exactly 20 prices stored, we calculate our Simple Moving
    Average (SMA) using Numpy's mean function, which is then printed along with its
    respective timestamp.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每当新的价格点到达时，它就将价格添加到deque 'prices'中。一旦我们存储了正好20个价格，我们便使用Numpy的mean函数计算简单移动平均(SMA)，并连同相应的时间戳一起打印出来。
- en: In essence, investing in real-time data analytics will ensure that you're not
    just going with the flow but shaping the current. You will be in the captain's
    seat of your trading journey, steering with insights brewed afresh by the second.
    In the forthcoming s, let's expand our understanding to explore other aspects
    of using real-time data for algorithmic trading such as event-driven programming,
    risk management in real-time, and real-time data latency. You'll discover how
    all these pieces come together to form a complete, robust trading system. Algorithmic
    trading is not a sprint, but a marathon that demands endurance, precision, and
    timely decision-making. Equip yourself with real-time data analytics, and you're
    well on your way to cross the finish line triumphantly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，投资于实时数据分析将确保你不仅仅是随波逐流，而是塑造潮流。你将坐在交易旅程的船长座位上，以每秒钟新鲜酿造的洞见来掌舵。在接下来的部分中，让我们扩展理解，探讨使用实时数据进行算法交易的其他方面，例如事件驱动编程、实时风险管理和实时数据延迟。你将发现这些部分是如何结合在一起，形成一个完整、强大的交易系统。算法交易不是短跑，而是马拉松，要求耐力、精准和及时的决策。装备自己以实时数据分析，你就能顺利越过终点线。
- en: Event-Driven Programming for Real-Time Trading
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实时交易的事件驱动编程
- en: In algorithmic trading, proficient players have comprehended that timing is
    everything. Executing trades at the opportune moment could spell the difference
    between tangible profit or dismal loss. The cornerstone of such impeccable timing
    is an approach known as event-driven programming. Let us delve into the abyss
    of event-driven programming for real-time trading. By the end, you will understand
    why event-driven programming is coveted in the realm of high-frequency trading,
    and how Python's capabilities specifically eases the implementation of this approach.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易中，熟练的参与者已经领悟到时机就是一切。在合适的时刻执行交易可能意味着可观的利润或惨淡的损失。这种完美时机的基石是一种称为事件驱动编程的方法。让我们深入探讨实时交易的事件驱动编程。到最后，你将理解为什么事件驱动编程在高频交易领域受到青睐，以及
    Python 的能力如何特别简化这种方法的实现。
- en: Evolution has bestowed upon us the concept of event-driven programming. It's
    a programming paradigm centred around the concept of events - the occurrences
    that affect the flow of the program. In trading, these events generally equate
    to changes in market data, but they can likewise include server issues, a change
    in portfolio constituents, a change in regulatory guidelines, and so forth. Upon
    such events' occurrence, the event handling routine - code specifically written
    to respond to the particular event - is invoked, radically changing the direction
    of the wind in the sea of algorithms.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 演化赋予了我们事件驱动编程的概念。这是一种围绕事件——影响程序流程的事件——的编程范式。在交易中，这些事件通常对应市场数据的变化，但也可以包括服务器问题、投资组合成分的变化、监管指南的变化等等。随着这些事件的发生，事件处理例程——专门为响应特定事件而编写的代码——被调用，彻底改变了算法海洋中的风向。
- en: 'Python lends fantastically to an event-driven programming setup. It allows
    the construction of an event handler that will continuously monitor market event
    changes. With asynchronous programming libraries like asyncio and sophisticated
    packages like event-driven, python developers are armed to the teeth to handle
    the deluge of real-time trading data like a seasoned sailor in the storm. A simple
    demonstration of an event-driven implementation in Python would look like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Python 非常适合事件驱动编程设置。它允许构建一个事件处理程序，持续监控市场事件的变化。借助像 asyncio 这样的异步编程库以及复杂的事件驱动包，Python
    开发者在处理实时交易数据的洪流时就像经验丰富的水手在风暴中一样，从容不迫。Python 中事件驱动实现的简单示例如下：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this simplified scenario, the creation of an event instance, `TradeEvent()`
    is seen. This class keeps a record of all the associated callback functions which
    will be triggered when the respective event is raised. Understanding and designing
    an effective event-driven programming setup is where the key to successful real-time
    trading lies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简化的场景中，可以看到一个事件实例的创建，`TradeEvent()`。这个类记录了所有相关的回调函数，当相应的事件被触发时，这些函数会被调用。理解和设计一个有效的事件驱动编程设置是成功进行实时交易的关键所在。
- en: Carefully choreographed acts of nature cannot be predicted, but with enough
    preparation, one can ride out the storm. Similarly, event-driven programming isn't
    about predicting the future of trading, but about being ready when a profitable
    opportunity presents itself. Preceding s have also expounded on essential aspects
    of real-time data usage in algorithmic trading. Building on this groundwork, let’s
    proceed into subjects that make your trading operation a masterful rendition of
    programming art. These include the management of real-time risk, understanding
    data latency, dealing with streaming data, and finally deploying a time-series
    database for it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 精心编排的自然行为是无法预测的，但通过充分准备，人们可以挺过风暴。类似地，事件驱动编程并不是关于预测交易的未来，而是关于在有利机会出现时做好准备。之前的研究也阐述了实时数据在算法交易中使用的基本方面。在这一基础上，让我们继续探讨使您的交易操作成为编程艺术杰作的主题。这些包括实时风险管理、理解数据延迟、处理流数据，以及最终为其部署时间序列数据库。
- en: Take a deep breath, fellow trader. You are not just combating the waves, but
    mastering the tempest. Each moment is but an opportunity in the fierce, blazing
    universe of algorithmic trading. With Python and event-driven programming at your
    compass, explore the cerebral battleground with an agility that others can only
    marvel at. Is the sea of trades a tumultuous storm or a glorious battle cry? For
    a true event-driven financial gladiator, it's never the former.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 深呼吸，交易者。您不仅是在抗击波浪，而是在掌控风暴。每一刻在激烈而璀璨的算法交易宇宙中都是一个机会。借助Python和事件驱动编程，您可以以其他人只能惊叹的敏捷性探索这片智力战场。交易的海洋是动荡的风暴，还是辉煌的战斗号角？对于真正的事件驱动金融勇士来说，绝不会是前者。
- en: Real-Time Risk Management
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实时风险管理
- en: As algorithmic traders, we innately understand that no potential for gain comes
    without the shadow of risk looming not-so-distantly. Winning the strategy game
    of trading doesn't always mean incessantly chasing the glory of profit. It often
    means navigating the stormy waters of uncertainty with a robust and adaptive risk
    management system. More often, this risk management orchestrates its chore in
    real-time, adjusting to the ever-gyrating landscape of the market, we navigate
    the labyrinth of real-time risk management in algorithmic trading.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作为算法交易者，我们天生就明白，任何潜在的收益背后都隐含着不远处的风险阴影。在交易策略游戏中获胜并不总是意味着不断追逐利润的荣耀。这往往意味着以一种强大且灵活的风险管理系统在不确定的风浪中航行。更常见的是，这种风险管理在实时中协调其动作，适应市场不断变化的环境，我们在算法交易中驾驭实时风险管理的迷宫。
- en: Real-time risk management involves gauging and managing the risk levels of trading
    strategies within the blinks of market shift. It's a systemic measure that plays
    a vital role in mitigating potential losses and ensuring the functional resilience
    of your trading system. In the trading universe, the real-time component of this
    phrase is what brings home the bacon. Reacting to risks as they emerge, without
    time as a luxury, equates to staying ahead of the curve.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 实时风险管理涉及在市场变化的瞬间评估和管理交易策略的风险水平。这是一种系统性的措施，在减轻潜在损失和确保交易系统功能韧性方面发挥着重要作用。在交易宇宙中，这个短语的实时成分是带回收益的关键。及时对出现的风险作出反应，没有时间作为奢侈，意味着保持领先。
- en: Having a powerful real-time risk management system is no more a luxury but,
    in fact, a survival requisite in today's algorithmic trading world. Python, with
    its sophisticated programming potentiality and innumerable function libraries,
    enables you to establish such solutions that comprehensively cover the essential
    components of real-time risk management. These primarily include an automated
    stop-loss system, position sizing, real-time alerts, and sophisticated stress-testing
    systems.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个强大的实时风险管理系统不再是奢侈，而是当今算法交易世界中的生存必需品。Python凭借其复杂的编程潜力和无数功能库，使您能够建立全面覆盖实时风险管理基本组件的解决方案。这些主要包括自动止损系统、头寸管理、实时警报和复杂的压力测试系统。
- en: An understanding of an automated stop-loss system helps create positions that
    automatically close when the loss on a trade reaches a predetermined threshold.
    This system acts as a fail-proof weapon, ensuring that your trading ecosystem
    doesn't crumble even under severe adverse market conditions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 理解自动止损系统有助于创建在交易损失达到预定阈值时自动关闭的头寸。该系统作为一种万无一失的武器，确保即使在严峻的市场条件下，您的交易生态系统也不会崩溃。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Position sizing is another essential aspect of risk management. It entails determining
    the trading position's size or the number of shares to buy or sell in a trade.
    Effectively leveraged, position sizing can protect your portfolio from significant
    volatility.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 头寸大小是风险管理的另一个重要方面。它涉及确定交易头寸的大小或在交易中买入或卖出的股票数量。有效地利用头寸大小可以保护你的投资组合免受重大波动的影响。
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Push notifications and real-time alerts help keep track of every minute market
    movement, enabling immediate reaction to potential risk factors. Python, with
    its robust packages such as `pushbullet.py`, make setting up these real-time alerts
    an extremely smooth process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 推送通知和实时警报帮助追踪每一分钟的市场动态，使得能够立即对潜在风险因素作出反应。Python及其强大的包，如`pushbullet.py`，使设置这些实时警报变得非常顺畅。
- en: Risk is an ever-morphing entity in the dynamic market landscape. Therefore,
    real-time risk management isn't just about setting up risk boundaries, but continually
    updating them to accommodate the constantly changing market conditions. Stress-testing,
    a simulation technique used in algorithmic trading, gauges a trading strategy's
    resilience to extreme market conditions, effectively ensuring your system is always
    prepared for the worst.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 风险是动态市场环境中不断变化的实体。因此，实时风险管理不仅仅是设置风险边界，而是不断更新这些边界，以适应不断变化的市场条件。压力测试，一种用于算法交易的模拟技术，衡量交易策略在极端市场条件下的韧性，确保你的系统始终为最坏情况做好准备。
- en: Breathe deeply, intrepid trader. You're not simply charting the unpredictable
    waves of algorithmic trading. Instead, you're proactively shaping your voyage
    by mastering real-time risk management, transforming turbulent squalls into the
    gentlest breeze. Remember, in the art of trading, success is not about avoiding
    the storm but about learning to sail your ship. Powered by Python and a robust
    real-time risk management system, tackle algorithmic trading with a resilience
    that leaves others in awe.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 深呼吸，勇敢的交易者。你不仅是在描绘算法交易的不可预测的波涛，而是在通过掌握实时风险管理积极塑造你的航程，将狂暴的风暴转化为最温和的微风。记住，在交易的艺术中，成功并不是避免风暴，而是学会驾驭你的船。依托Python和强大的实时风险管理系统，以一种令他人赞叹的韧性应对算法交易。
- en: Data Latency and its Impact
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数据延迟及其影响
- en: In the universe of trading, time is as vital as it is relentless. Every microscopic
    moment bears an inscription of possibility that could pivot the course of fortunes.
    They say, 'time and tide wait for none,' resonating profoundly within the realm
    of trading. No tide is as mercurial as the waves of market prices, and no time
    is as fleeting as the instances in algorithmic trading. In this world, every nano-second
    is a combat zone, and to win, one must outpace time itself or, better still, tame
    it. Here, we drift into the domain of data latency and its omnipresent impact
    in algorithmic trading.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在交易的宇宙中，时间既重要又无情。每一个微小的瞬间都蕴含着可能性，能够改变财富的轨迹。人们常说：“时间和潮汐不等人”，这在交易领域内引起了深刻的共鸣。没有哪个潮水像市场价格的波动那样变化无常，也没有哪个时间像算法交易中的瞬息那样转瞬即逝。在这个世界中，每个纳秒都是战场，要想取胜，必须超越时间本身，或者更好地驾驭时间。在这里，我们深入探讨数据延迟及其在算法交易中的普遍影响。
- en: Data latency, in the simplest terms, is the delay in the data transmission.
    In algorithmic trading, it refers to the time lag between the moment the market
    event happens (like a price change), till the point the event is captured in your
    trading platform. The longer this delay, the higher is the data latency. Lower
    latency, therefore, translates to tighter control over trading activities.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数据延迟，简单来说，就是数据传输的延迟。在算法交易中，它指的是市场事件发生（例如价格变化）到该事件在你的交易平台上被捕捉的时间滞后。延迟越长，数据延迟就越高。因此，较低的延迟意味着对交易活动的更紧密控制。
- en: While for a regular trader, this latency might seem an inconspicuous stretch
    of milliseconds, for an algorithmic trader, it's an eternity. These snippets of
    time could mean, in some cases, the difference between a profitable trade and
    a loss. To put things in perspective, today's high-frequency trading firms vie
    for attaining data latency in the realm of microseconds (one millionth of a second)
    or even nanoseconds (one billionth of a second).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通交易者而言，这种延迟可能看似不显眼的毫秒，但对于算法交易者而言，这就是一个永恒。这些时间片段在某些情况下可能意味着盈利交易与亏损之间的差距。为了更好地理解，今天的高频交易公司争取在微秒（百万分之一秒）甚至纳秒（十亿分之一秒）范围内达到数据延迟。
- en: In the vast and intricate landscape of algorithmic trading, data latency impacts
    primarily in two ways - your ability to capture opportunities swiftly and the
    risk of slippage. When latency is high, fast-moving market opportunities get missed,
    or worse, expose you to higher losses from sudden adverse market movements - a
    phenomenon known as slippage.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在广阔复杂的算法交易领域，数据延迟主要通过两种方式影响——你迅速捕捉机会的能力和滑点风险。当延迟较高时，快速变化的市场机会被错过，或者更糟的是，会让你面临来自突发不利市场变动的更大损失——这被称为滑点现象。
- en: Python, with its advanced tools and libraries, helps us tackle data latency.
    Libraries like `ZeroMQ` can transport messages or data over different networks
    swiftly, with minimal latency. Other methods to combat latency issues might include
    infrastructure improvements such as faster internet connection, direct market
    access or even co-location - a physical proximity of your server to the exchange's
    server for quickest data exchange.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python凭借其先进的工具和库，帮助我们应对数据延迟。像`ZeroMQ`这样的库可以迅速地在不同网络上运输消息或数据，延迟极小。其他解决延迟问题的方法可能包括基础设施改善，如更快的互联网连接、直接市场接入或甚至是服务器与交易所服务器的物理靠近，以实现最快的数据交换。
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The above Python code demonstrates the use of the `ZeroMQ` library to send a
    test string message. In a real-world trading application, this message could involve
    a trade order or a market data update, executed swiftly, outrunning latency issues.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上述Python代码演示了如何使用`ZeroMQ`库发送测试字符串消息。在实际的交易应用中，这条消息可能涉及交易订单或市场数据更新，快速执行以应对延迟问题。
- en: Taming time in trading means overriding data latency, a mission steered by the
    unbeatable Python's prowess coupled with advanced infrastructural adaptability.
    As we journey through these galactic realms of real-time data processing, remember
    - it's not just about beating time; it's about befriending it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在交易中掌控时间意味着克服数据延迟，这一使命由无与伦比的Python能力和先进的基础设施适应性共同驱动。当我们深入这些实时数据处理的星际领域时，请记住——这不仅仅是战胜时间，更是与时间交朋友。
- en: Streaming Data with Websockets
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Websockets进行流数据处理
- en: 'Streams of data: serene rivers of blooming potential, continually running,
    their waters brimming with information. Yet harnessing these flows efficiently
    is a challenge, one that requires navigational acumen and the right tools. When
    it comes to algorithmic trading, there''s no piece of equipment more apt for data
    navigation than Websockets.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流：宁静的潜力之河，不断流淌，水面满载信息。然而，高效利用这些流动是一项挑战，需要导航智慧和正确的工具。在算法交易中，没有比Websockets更适合数据导航的设备。
- en: Websockets are communication protocols that establish real-time, bidirectional
    communication channels over a single TCP connection. They maintain an 'open' connection,
    enabling a server and client to send real-time updates in either direction as
    soon as data becomes available, unlike the traditional HTTP's request-response
    model where the client must initiate the interactions. This aspect of Websockets
    is crucial for algorithmic trading, where split-second data updates could determine
    the success of a trading strategy.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Websockets是建立实时双向通信通道的协议，基于单一的TCP连接。它们保持“开放”连接，允许服务器和客户端在数据可用时随时发送实时更新，与传统HTTP的请求-响应模型不同，后者需要客户端主动发起交互。Websockets的这一特点对算法交易至关重要，因为瞬时数据更新可能决定交易策略的成功。
- en: Consider an algorithmic trading system that needs real-time market data to make
    a trading decision. Using Http requests, this system would continuously poll a
    server for data. Though functional, such a model is inefficient, leading to wasted
    resources, higher bandwidth usage, and considerable time delay. In contrast, with
    a Websockets-based system, our trading platform adopts a 'ready to receive' mode
    where the server instantly pushes relevant market data when it becomes available,
    ensuring faster response times and more efficient data utilisation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个需要实时市场数据来做出交易决策的算法交易系统。使用HTTP请求，这个系统将不断轮询服务器以获取数据。尽管功能正常，但这种模式效率低下，导致资源浪费、带宽使用增加和显著的时间延迟。相比之下，基于Websockets的系统使我们的交易平台采用“准备接收”模式，服务器在相关市场数据可用时立即推送，确保更快的响应时间和更高效的数据利用。
- en: Python, true to its versatility, offers superb support for Websockets. Libraries
    like `websocket` provide low-level APIs for Websocket interaction, while `websockets`
    (note the 's' at the end) offers high-level APIs with an easy-to-use interface.
    Let's look at a basic Python code illustrating the use of the `websocket` library.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python以其多功能性，提供了对Websockets的卓越支持。像`websocket`这样的库提供了Websocket交互的低级API，而`websockets`（注意结尾的's'）则提供了易于使用的高级API。让我们看看一个基本的Python代码，说明如何使用`websocket`库。
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this code, we create an instance of `websocket.WebSocketApp` and supply 'on
    message' and 'on open' callback function handlers. The `on_message` function is
    called whenever a new message arrives, whereas `on_open` is called once our Websocket
    is successfully connected. This code would connect to the specified endpoint,
    streaming real-time data as messages that our functions can process instantaneously.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们创建了一个`websocket.WebSocketApp`的实例，并提供了'消息到达'和'连接成功'的回调函数处理器。每当新消息到达时，`on_message`函数会被调用，而`on_open`则在我们的Websocket成功连接后被调用。该代码将连接到指定的端点，实时流式传输数据作为消息，以便我们的函数能够即时处理。
- en: But mind you, while Websockets are powerful tools that enable real-time interaction
    with data streams, they have to be tamed carefully. Overly enthusiastic data streaming
    might lead to flooding market data, leading to potential system performance issues.
    Remember, it's not about having all the data but having the right data at the
    right time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 但是请注意，尽管Websockets是强大的工具，能够实时与数据流进行交互，但必须谨慎使用。过于热衷的数据流可能导致市场数据泛滥，进而引发潜在的系统性能问题。记住，关键不是拥有所有数据，而是在正确的时间拥有正确的数据。
- en: Time-Series Databases for Real-Time Data
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据的时间序列数据库
- en: In the realm of algorithmic trading, data is the lifeblood. Specifically, real-time
    data. Every decision the algorithm makes, each tweak the trader initiates, and
    every strategy the system utilizes, depends on the latest market data. But data
    in itself becomes meaningless if not stored and managed efficiently. Here, specialized
    databases, like time-series databases (TSDBs), become pivotal.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易的领域中，数据是生命线。具体来说，是实时数据。算法做出的每一个决策、交易者进行的每一次调整以及系统利用的每一种策略，都依赖于最新的市场数据。但是如果数据没有高效地存储和管理，便会变得毫无意义。在这里，像时间序列数据库（TSDBs）这样的专用数据库变得至关重要。
- en: Time-series databases are optimized for handling time-stamped data. What differentiates
    them from traditional relational databases or key-value databases is their ability
    to efficiently store and retrieve data that happens over time. This ability makes
    them indispensable in scenarios like financial trading, where real-time data equates
    to real-time profits (or losses).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据库经过优化，用于处理带时间戳的数据。它们与传统的关系数据库或键值数据库的区别在于能够高效地存储和检索随时间变化的数据。这一能力使它们在金融交易等场景中不可或缺，因为实时数据等同于实时利润（或损失）。
- en: In algorithmic trading, time-series data usually involves stock prices changing
    over various time intervals. A TSDB can efficiently store this data and support
    rapid retrieval of historical data for a specific point in time or a specific
    interval. This retrieval underpins the algorithms' ability to analyze past trends,
    make current decisions, and predict future movements.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易中，时间序列数据通常涉及股票价格在不同时间间隔内的变化。TSDB可以高效地存储这些数据，并支持快速检索特定时间点或特定时间间隔的历史数据。这种检索支撑了算法分析过去趋势、做出当前决策和预测未来走势的能力。
- en: Python, our infallible ally in algorithmic trading, provides a variety of libraries
    to interact with time-series databases. One notable library, called 'InfluxDB-Python',
    interfaces with InfluxDB, a popular open-source time-series database. The following
    Python code showcases how the library can be used to interact with InfluxDB.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Python，我们在算法交易中不可或缺的盟友，提供了多种库与时间序列数据库进行交互。一个显著的库叫做'InfluxDB-Python'，它与流行的开源时间序列数据库InfluxDB进行接口。以下Python代码展示了如何使用该库与InfluxDB进行交互。
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code provides an example of connecting to an InfluxDB database, writing
    a new point with time and value data, and finally, querying the data.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码提供了一个连接到InfluxDB数据库的示例，写入一个包含时间和数值数据的新点，最后查询这些数据。
- en: Using time-series databases in concert with Websockets for data streaming creates
    a robust platform for handling real-time data in algorithmic trading. Combining
    the real-time data acquisition capabilities of Websockets with the efficient data
    handling and recall capacities of time-series databases, it forms a powerhouse
    of data management that can streamline and boost the performance of algorithmic
    trading strategies.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将时间序列数据库与Websockets结合使用进行数据流处理，创建了一个强大的平台来处理算法交易中的实时数据。通过将Websockets的实时数据采集能力与时间序列数据库高效的数据处理和回调能力相结合，它形成了一个数据管理的强大中心，能够简化和提升算法交易策略的性能。
- en: As reassuring as it sounds, one must not forget the outgoing tide leaves only
    the sturdy ships. The layers of complexity in handling real-time data, managing
    connectivity, and dealing with extreme cases brought to light by trading events
    can challenge even the most efficient systems. Therefore, a relentless quest for
    better strategies, methods and tools continues in the world of algorithmic trading,
    ensuring that the future remains intriguing and enriching. All of which sets the
    stage for our next adventure into the invaluable implications of machine learning
    and AI in algorithmic trading.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来令人放心，但我们必须记住，退潮时只留下坚固的船只。处理实时数据、管理连接性以及应对交易事件带来的极端情况的复杂性，甚至可以挑战最有效的系统。因此，在算法交易的世界中，对更好策略、方法和工具的不懈追求仍在继续，确保未来充满吸引力和丰富性。这一切为我们接下来探索机器学习和人工智能在算法交易中的宝贵意义奠定了基础。
