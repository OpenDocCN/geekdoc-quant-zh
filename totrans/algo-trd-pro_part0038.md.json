["```pypython\n\nimport matplotlib.pyplot as plt\n\ndef plot_covered_call(stock_prices, strike_price, premium):\n\n# Payoff from long stock position (bought at strike_price)\n\nlong_stock_payoff = stock_prices - strike_price\n\n# Payoff from short call option (premium received)\n\nshort_call_payoff = np.where(stock_prices > strike_price, strike_price - stock_prices + premium, premium)\n\n# Net payoff from covered call\n\ncovered_call_payoff = long_stock_payoff + short_call_payoff\n\nplt.plot(stock_prices, covered_call_payoff, label='Covered Call Payoff')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit/Loss')\n\nplt.legend()\n\nplt.show()\n\n# Example stock prices at expiry\n\nstock_prices = np.linspace(80, 120, 100)\n\nplot_covered_call(stock_prices, strike_price=100, premium=5)\n\n```", "```pypython\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Define parameters\n\nstock_price = 100  # Current stock price\n\nstrike_price = 110  # Strike price of the call option\n\npremium = 3  # Premium received for selling the call option\n\nshares = 100  # Number of shares owned\n\n# Calculate payoffs\n\nstock_price_range = np.arange(0.5 * stock_price, 1.5 * stock_price)\n\nlong_stock_payoff = (stock_price_range - stock_price) * shares\n\ncall_option_payoff = np.where(stock_price_range < strike_price, premium * shares, (premium - (stock_price_range - strike_price)) * shares)\n\ncovered_call_payoff = long_stock_payoff + call_option_payoff\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, long_stock_payoff, label='Long Stock Payoff')\n\nplt.plot(stock_price_range, call_option_payoff, label='Call Option Payoff', linestyle='--')\n\nplt.plot(stock_price_range, covered_call_payoff, label='Covered Call Payoff')\n\nplt.title('Covered Call Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(strike_price, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Define parameters\n\nput_strike_price = 90  # Strike price of the put option\n\nput_premium = 4  # Premium paid for buying the put option\n\n# Calculate payoffs\n\nput_option_payoff = np.where(stock_price_range > put_strike_price, -put_premium * shares, (put_strike_price - stock_price_range - put_premium) * shares)\n\nprotective_put_payoff = long_stock_payoff + put_option_payoff\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, put_option_payoff, label='Put Option Payoff', linestyle='--')\n\nplt.plot(stock_price_range, protective_put_payoff, label='Protective Put Payoff')\n\nplt.title('Protective Put Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(put_strike_price, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Straddle parameters\n\nstraddle_strike = 100  # Strike price for both call and put options\n\ncall_premium = put_premium = 5  # Premium for call and put options\n\n# Calculate payoffs\n\ncall_payoff_straddle = np.where(stock_price_range > straddle_strike, stock_price_range - straddle_strike - call_premium, -call_premium) * shares\n\nput_payoff_straddle = np.where(stock_price_range < straddle_strike, straddle_strike - stock_price_range - put_premium, -put_premium) * shares\n\nstraddle_payoff = call_payoff_straddle + put_payoff_straddle\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, call_payoff_straddle, label='Call Option Payoff', linestyle='--')\n\nplt.plot(stock_price_range, put_payoff_straddle, label='Put Option Payoff', linestyle='--')\n\nplt.plot(stock_price_range, straddle_payoff, label='Straddle Payoff')\n\nplt.title('Long Straddle Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(straddle_strike, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Strangle parameters\n\ncall_strike_strangle = 110\n\nput_strike_strangle = 90\n\n# Calculate payoffs\n\ncall_payoff_strangle = np.where(stock_price_range > call_strike_strangle, stock_price_range - call_strike_strangle - call_premium, -call_premium) * shares\n\nput_payoff_strangle = np.where(stock_price_range < put_strike_strangle, put_strike_strangle - stock_price_range - put_premium, -put_premium) * shares\n\nstrangle_payoff = call_payoff_strangle + put_payoff_strangle\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, call_payoff_strangle, label='Call Option Payoff', linestyle='--')\n\nplt.plot(stock_price_range, put_payoff_strangle, label='Put Option Payoff', linestyle='--')\n\nplt.plot(stock_price_range, strangle_payoff, label='Strangle Payoff')\n\nplt.title('Long Strangle Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(call_strike_strangle, color='grey', linestyle='--')\n\nplt.axvline(put_strike_strangle, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Iron condor parameters\n\nlower_put_strike = 95\n\nupper_call_strike = 105\n\nlong_lower_put_strike = 90\n\nlong_upper_call_strike = 110\n\n# Calculate payoffs\n\nlower_put_payoff = np.maximum(lower_put_strike - stock_price_range, 0) - (lower_put_strike - long_lower_put_strike)\n\nupper_call_payoff = np.maximum(stock_price_range - upper_call_strike, 0) - (long_upper_call_strike - upper_call_strike)\n\niron_condor_payoff = lower_put_payoff + upper_call_payoff\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, lower_put_payoff, label='Lower Put Spread Payoff', linestyle='--')\n\nplt.plot(stock_price_range, upper_call_payoff, label='Upper Call Spread Payoff', linestyle='--')\n\nplt.plot(stock_price_range, iron_condor_payoff, label='Iron Condor Payoff')\n\nplt.title('Iron Condor Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.fill_between(stock_price_range, iron_condor_payoff, where=(stock_price_range > lower_put_strike) & (stock_price_range < upper_call_strike), color='grey', alpha=0.3)\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(lower_put_strike, color='grey', linestyle='--')\n\nplt.axvline(upper_call_strike, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Butterfly parameters\n\nmiddle_strike = 100\n\nlower_strike = 95\n\nupper_strike = 105\n\n# Calculate payoffs\n\nlower_call_payoff = np.maximum(stock_price_range - lower_strike, 0)\n\nmiddle_call_payoff = -2 * np.maximum(stock_price_range - middle_strike, 0)\n\nupper_call_payoff = np.maximum(stock_price_range - upper_strike, 0)\n\nbutterfly_payoff = lower_call_payoff + middle_call_payoff + upper_call_payoff\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, butterfly_payoff, label='Butterfly Spread Payoff')\n\nplt.title('Long Call Butterfly Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(lower_strike, color='grey', linestyle='--')\n\nplt.axvline(upper_strike, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Bull call spread parameters\n\nlong_call_strike = 100\n\nshort_call_strike = 110\n\n# Calculate payoffs\n\nlong_call_payoff = np.maximum(stock_price_range - long_call_strike, 0) - (long_call_strike - stock_price)\n\nshort_call_payoff = -(np.maximum(stock_price_range - short_call_strike, 0) - (short_call_strike - stock_price))\n\nbull_call_spread_payoff = long_call_payoff + short_call_payoff\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, long_call_payoff, label='Long Call Payoff', linestyle='--')\n\nplt.plot(stock_price_range, short_call_payoff, label='Short Call Payoff', linestyle='--')\n\nplt.plot(stock_price_range, bull_call_spread_payoff, label='Bull Call Spread Payoff')\n\nplt.title('Bull Call Spread Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(long_call_strike, color='grey', linestyle='--')\n\nplt.axvline(short_call_strike, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Calendar call spread parameters\n\nstrike_price = 100\n\nnear_term_call_expiry = 30  # days\n\nfar_term_call_expiry = 60  # days\n\ncurrent_stock_price = 100\n\n# Calculate payoffs\n\nnear_term_call_payoff = option_pricing_model(strike_price, near_term_call_expiry, current_stock_price)  # Placeholder function\n\nfar_term_call_payoff = -option_pricing_model(strike_price, far_term_call_expiry, current_stock_price)  # Placeholder function\n\ncalendar_call_spread_payoff = near_term_call_payoff + far_term_call_payoff\n\n# Plot payoffs\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, calendar_call_spread_payoff, label='Calendar Call Spread Payoff')\n\nplt.title('Calendar Call Spread Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Expiry of Near Term Call')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(strike_price, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Define a function to calculate the theoretical value of an option based on the Black-Scholes model\n\ndef black_scholes_call(S, K, T, r, sigma):\n\nd1 = (np.log(S / K) + (r + 0.5 * sigma2) * T) / (sigma * np.sqrt(T))\n\nd2 = d1 - sigma * np.sqrt(T)\n\ncall_price = (S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2))\n\nreturn call_price\n\n# Calendar spread parameters\n\nstrike_price = 100\n\nshort_term_expiry = 30  # In days\n\nlong_term_expiry = 90  # In days\n\ninterest_rate = 0.01  # Risk-free interest rate\n\nvolatility = 0.2  # Assumed volatility\n\n# Current stock price range for plotting\n\nstock_price_range = np.linspace(80, 120, 100)\n\n# Calculate and plot the payoff profile for the calendar spread\n\nshort_term_call = black_scholes_call(stock_price_range, strike_price, short_term_expiry / 365, interest_rate, volatility)\n\nlong_term_call = black_scholes_call(stock_price_range, strike_price, long_term_expiry / 365, interest_rate, volatility)\n\ncalendar_spread_payoff = long_term_call - short_term_call\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, calendar_spread_payoff, label='Calendar Spread Payoff')\n\nplt.title('Calendar Spread Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Short Term Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(strike_price, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```", "```pypython\n\n# Diagonal spread parameters\n\nlong_call_strike = 105\n\nshort_call_strike = 100\n\nshort_term_expiry = 30  # In days\n\nlong_term_expiry = 90  # In days\n\n# Calculate payoffs\n\nshort_call_payoff = black_scholes_call(stock_price_range, short_call_strike, short_term_expiry / 365, interest_rate, volatility)\n\nlong_call_payoff = black_scholes_call(stock_price_range, long_call_strike, long_term_expiry / 365, interest_rate, volatility)\n\ndiagonal_spread_payoff = long_call_payoff - short_call_payoff\n\nplt.figure(figsize=(10, 5))\n\nplt.plot(stock_price_range, diagonal_spread_payoff, label='Diagonal Spread Payoff')\n\nplt.title('Diagonal Spread Strategy Payoff Diagram')\n\nplt.xlabel('Stock Price at Short Term Expiry')\n\nplt.ylabel('Profit / Loss')\n\nplt.axhline(0, color='black', linewidth=0.5)\n\nplt.axvline(long_call_strike, color='grey', linestyle='--')\n\nplt.legend()\n\nplt.grid(True)\n\nplt.show()\n\n```"]